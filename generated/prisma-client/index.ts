// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  activity: (where?: ActivityWhereInput) => Promise<boolean>;
  address: (where?: AddressWhereInput) => Promise<boolean>;
  advice: (where?: AdviceWhereInput) => Promise<boolean>;
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  file: (where?: FileWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activity: (where: ActivityWhereUniqueInput) => ActivityNullablePromise;
  activities: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Activity>;
  activitiesConnection: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityConnectionPromise;
  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  advice: (where: AdviceWhereUniqueInput) => AdviceNullablePromise;
  advices: (args?: {
    where?: AdviceWhereInput;
    orderBy?: AdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Advice>;
  advicesConnection: (args?: {
    where?: AdviceWhereInput;
    orderBy?: AdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdviceConnectionPromise;
  comment: (where: CommentWhereUniqueInput) => CommentNullablePromise;
  comments: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Comment>;
  commentsConnection: (args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CommentConnectionPromise;
  file: (where: FileWhereUniqueInput) => FileNullablePromise;
  files: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<File>;
  filesConnection: (args?: {
    where?: FileWhereInput;
    orderBy?: FileOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FileConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivity: (data: ActivityCreateInput) => ActivityPromise;
  updateActivity: (args: {
    data: ActivityUpdateInput;
    where: ActivityWhereUniqueInput;
  }) => ActivityPromise;
  updateManyActivities: (args: {
    data: ActivityUpdateManyMutationInput;
    where?: ActivityWhereInput;
  }) => BatchPayloadPromise;
  upsertActivity: (args: {
    where: ActivityWhereUniqueInput;
    create: ActivityCreateInput;
    update: ActivityUpdateInput;
  }) => ActivityPromise;
  deleteActivity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  deleteManyActivities: (where?: ActivityWhereInput) => BatchPayloadPromise;
  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createAdvice: (data: AdviceCreateInput) => AdvicePromise;
  updateAdvice: (args: {
    data: AdviceUpdateInput;
    where: AdviceWhereUniqueInput;
  }) => AdvicePromise;
  updateManyAdvices: (args: {
    data: AdviceUpdateManyMutationInput;
    where?: AdviceWhereInput;
  }) => BatchPayloadPromise;
  upsertAdvice: (args: {
    where: AdviceWhereUniqueInput;
    create: AdviceCreateInput;
    update: AdviceUpdateInput;
  }) => AdvicePromise;
  deleteAdvice: (where: AdviceWhereUniqueInput) => AdvicePromise;
  deleteManyAdvices: (where?: AdviceWhereInput) => BatchPayloadPromise;
  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (args: {
    data: CommentUpdateInput;
    where: CommentWhereUniqueInput;
  }) => CommentPromise;
  updateManyComments: (args: {
    data: CommentUpdateManyMutationInput;
    where?: CommentWhereInput;
  }) => BatchPayloadPromise;
  upsertComment: (args: {
    where: CommentWhereUniqueInput;
    create: CommentCreateInput;
    update: CommentUpdateInput;
  }) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createFile: (data: FileCreateInput) => FilePromise;
  updateFile: (args: {
    data: FileUpdateInput;
    where: FileWhereUniqueInput;
  }) => FilePromise;
  updateManyFiles: (args: {
    data: FileUpdateManyMutationInput;
    where?: FileWhereInput;
  }) => BatchPayloadPromise;
  upsertFile: (args: {
    where: FileWhereUniqueInput;
    create: FileCreateInput;
    update: FileUpdateInput;
  }) => FilePromise;
  deleteFile: (where: FileWhereUniqueInput) => FilePromise;
  deleteManyFiles: (where?: FileWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activity: (
    where?: ActivitySubscriptionWhereInput
  ) => ActivitySubscriptionPayloadSubscription;
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  advice: (
    where?: AdviceSubscriptionWhereInput
  ) => AdviceSubscriptionPayloadSubscription;
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  file: (
    where?: FileSubscriptionWhereInput
  ) => FileSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "RESIDENT" | "WORKER" | "MANAGER";

export type Sex = "MALE" | "FEMALE";

export type Status = "PENDING" | "APPROVED" | "REJECTED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "idNumber_ASC"
  | "idNumber_DESC"
  | "password_ASC"
  | "password_DESC"
  | "role_ASC"
  | "role_DESC"
  | "sex_ASC"
  | "sex_DESC";

export type ActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "startAt_ASC"
  | "startAt_DESC"
  | "place_ASC"
  | "place_DESC"
  | "status_ASC"
  | "status_DESC"
  | "reply_ASC"
  | "reply_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AdviceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "building_ASC"
  | "building_DESC"
  | "unit_ASC"
  | "unit_DESC"
  | "room_ASC"
  | "room_DESC";

export type FileOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "path_ASC"
  | "path_DESC"
  | "filename_ASC"
  | "filename_DESC"
  | "mimetype_ASC"
  | "mimetype_DESC"
  | "encoding_ASC"
  | "encoding_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ActivityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  idNumber?: Maybe<String>;
  idNumber_not?: Maybe<String>;
  idNumber_in?: Maybe<String[] | String>;
  idNumber_not_in?: Maybe<String[] | String>;
  idNumber_lt?: Maybe<String>;
  idNumber_lte?: Maybe<String>;
  idNumber_gt?: Maybe<String>;
  idNumber_gte?: Maybe<String>;
  idNumber_contains?: Maybe<String>;
  idNumber_not_contains?: Maybe<String>;
  idNumber_starts_with?: Maybe<String>;
  idNumber_not_starts_with?: Maybe<String>;
  idNumber_ends_with?: Maybe<String>;
  idNumber_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  sex?: Maybe<Sex>;
  sex_not?: Maybe<Sex>;
  sex_in?: Maybe<Sex[] | Sex>;
  sex_not_in?: Maybe<Sex[] | Sex>;
  address?: Maybe<AddressWhereInput>;
  activities_every?: Maybe<ActivityWhereInput>;
  activities_some?: Maybe<ActivityWhereInput>;
  activities_none?: Maybe<ActivityWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  advices_every?: Maybe<AdviceWhereInput>;
  advices_some?: Maybe<AdviceWhereInput>;
  advices_none?: Maybe<AdviceWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  building?: Maybe<Int>;
  building_not?: Maybe<Int>;
  building_in?: Maybe<Int[] | Int>;
  building_not_in?: Maybe<Int[] | Int>;
  building_lt?: Maybe<Int>;
  building_lte?: Maybe<Int>;
  building_gt?: Maybe<Int>;
  building_gte?: Maybe<Int>;
  unit?: Maybe<Int>;
  unit_not?: Maybe<Int>;
  unit_in?: Maybe<Int[] | Int>;
  unit_not_in?: Maybe<Int[] | Int>;
  unit_lt?: Maybe<Int>;
  unit_lte?: Maybe<Int>;
  unit_gt?: Maybe<Int>;
  unit_gte?: Maybe<Int>;
  room?: Maybe<Int>;
  room_not?: Maybe<Int>;
  room_in?: Maybe<Int[] | Int>;
  room_not_in?: Maybe<Int[] | Int>;
  room_lt?: Maybe<Int>;
  room_lte?: Maybe<Int>;
  room_gt?: Maybe<Int>;
  room_gte?: Maybe<Int>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface ActivityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  startAt?: Maybe<DateTimeInput>;
  startAt_not?: Maybe<DateTimeInput>;
  startAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startAt_lt?: Maybe<DateTimeInput>;
  startAt_lte?: Maybe<DateTimeInput>;
  startAt_gt?: Maybe<DateTimeInput>;
  startAt_gte?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  place_not?: Maybe<String>;
  place_in?: Maybe<String[] | String>;
  place_not_in?: Maybe<String[] | String>;
  place_lt?: Maybe<String>;
  place_lte?: Maybe<String>;
  place_gt?: Maybe<String>;
  place_gte?: Maybe<String>;
  place_contains?: Maybe<String>;
  place_not_contains?: Maybe<String>;
  place_starts_with?: Maybe<String>;
  place_not_starts_with?: Maybe<String>;
  place_ends_with?: Maybe<String>;
  place_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  reply?: Maybe<String>;
  reply_not?: Maybe<String>;
  reply_in?: Maybe<String[] | String>;
  reply_not_in?: Maybe<String[] | String>;
  reply_lt?: Maybe<String>;
  reply_lte?: Maybe<String>;
  reply_gt?: Maybe<String>;
  reply_gte?: Maybe<String>;
  reply_contains?: Maybe<String>;
  reply_not_contains?: Maybe<String>;
  reply_starts_with?: Maybe<String>;
  reply_not_starts_with?: Maybe<String>;
  reply_ends_with?: Maybe<String>;
  reply_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  OR?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  NOT?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
}

export interface CommentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  advice?: Maybe<AdviceWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  OR?: Maybe<CommentWhereInput[] | CommentWhereInput>;
  NOT?: Maybe<CommentWhereInput[] | CommentWhereInput>;
}

export interface AdviceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  owner?: Maybe<UserWhereInput>;
  comments_every?: Maybe<CommentWhereInput>;
  comments_some?: Maybe<CommentWhereInput>;
  comments_none?: Maybe<CommentWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AdviceWhereInput[] | AdviceWhereInput>;
  OR?: Maybe<AdviceWhereInput[] | AdviceWhereInput>;
  NOT?: Maybe<AdviceWhereInput[] | AdviceWhereInput>;
}

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type AdviceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CommentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type FileWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FileWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  path?: Maybe<String>;
  path_not?: Maybe<String>;
  path_in?: Maybe<String[] | String>;
  path_not_in?: Maybe<String[] | String>;
  path_lt?: Maybe<String>;
  path_lte?: Maybe<String>;
  path_gt?: Maybe<String>;
  path_gte?: Maybe<String>;
  path_contains?: Maybe<String>;
  path_not_contains?: Maybe<String>;
  path_starts_with?: Maybe<String>;
  path_not_starts_with?: Maybe<String>;
  path_ends_with?: Maybe<String>;
  path_not_ends_with?: Maybe<String>;
  filename?: Maybe<String>;
  filename_not?: Maybe<String>;
  filename_in?: Maybe<String[] | String>;
  filename_not_in?: Maybe<String[] | String>;
  filename_lt?: Maybe<String>;
  filename_lte?: Maybe<String>;
  filename_gt?: Maybe<String>;
  filename_gte?: Maybe<String>;
  filename_contains?: Maybe<String>;
  filename_not_contains?: Maybe<String>;
  filename_starts_with?: Maybe<String>;
  filename_not_starts_with?: Maybe<String>;
  filename_ends_with?: Maybe<String>;
  filename_not_ends_with?: Maybe<String>;
  mimetype?: Maybe<String>;
  mimetype_not?: Maybe<String>;
  mimetype_in?: Maybe<String[] | String>;
  mimetype_not_in?: Maybe<String[] | String>;
  mimetype_lt?: Maybe<String>;
  mimetype_lte?: Maybe<String>;
  mimetype_gt?: Maybe<String>;
  mimetype_gte?: Maybe<String>;
  mimetype_contains?: Maybe<String>;
  mimetype_not_contains?: Maybe<String>;
  mimetype_starts_with?: Maybe<String>;
  mimetype_not_starts_with?: Maybe<String>;
  mimetype_ends_with?: Maybe<String>;
  mimetype_not_ends_with?: Maybe<String>;
  encoding?: Maybe<String>;
  encoding_not?: Maybe<String>;
  encoding_in?: Maybe<String[] | String>;
  encoding_not_in?: Maybe<String[] | String>;
  encoding_lt?: Maybe<String>;
  encoding_lte?: Maybe<String>;
  encoding_gt?: Maybe<String>;
  encoding_gte?: Maybe<String>;
  encoding_contains?: Maybe<String>;
  encoding_not_contains?: Maybe<String>;
  encoding_starts_with?: Maybe<String>;
  encoding_not_starts_with?: Maybe<String>;
  encoding_ends_with?: Maybe<String>;
  encoding_not_ends_with?: Maybe<String>;
  AND?: Maybe<FileWhereInput[] | FileWhereInput>;
  OR?: Maybe<FileWhereInput[] | FileWhereInput>;
  NOT?: Maybe<FileWhereInput[] | FileWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
}>;

export interface ActivityCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  owner: UserCreateOneWithoutActivitiesInput;
  startAt: DateTimeInput;
  place: String;
  status: Status;
  reply?: Maybe<String>;
}

export interface UserCreateOneWithoutActivitiesInput {
  create?: Maybe<UserCreateWithoutActivitiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutActivitiesInput {
  id?: Maybe<ID_Input>;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: Maybe<String>;
  role: Role;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressCreateOneWithoutUsersInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceCreateManyWithoutOwnerInput>;
}

export interface AddressCreateOneWithoutUsersInput {
  create?: Maybe<AddressCreateWithoutUsersInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  building: Int;
  unit: Int;
  room: Int;
}

export interface CommentCreateManyWithoutOwnerInput {
  create?: Maybe<
    CommentCreateWithoutOwnerInput[] | CommentCreateWithoutOwnerInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  content: String;
  advice?: Maybe<AdviceCreateOneWithoutCommentsInput>;
}

export interface AdviceCreateOneWithoutCommentsInput {
  create?: Maybe<AdviceCreateWithoutCommentsInput>;
  connect?: Maybe<AdviceWhereUniqueInput>;
}

export interface AdviceCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  owner: UserCreateOneWithoutAdvicesInput;
}

export interface UserCreateOneWithoutAdvicesInput {
  create?: Maybe<UserCreateWithoutAdvicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAdvicesInput {
  id?: Maybe<ID_Input>;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: Maybe<String>;
  role: Role;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressCreateOneWithoutUsersInput>;
  activities?: Maybe<ActivityCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
}

export interface ActivityCreateManyWithoutOwnerInput {
  create?: Maybe<
    ActivityCreateWithoutOwnerInput[] | ActivityCreateWithoutOwnerInput
  >;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
}

export interface ActivityCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  startAt: DateTimeInput;
  place: String;
  status: Status;
  reply?: Maybe<String>;
}

export interface AdviceCreateManyWithoutOwnerInput {
  create?: Maybe<
    AdviceCreateWithoutOwnerInput[] | AdviceCreateWithoutOwnerInput
  >;
  connect?: Maybe<AdviceWhereUniqueInput[] | AdviceWhereUniqueInput>;
}

export interface AdviceCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  comments?: Maybe<CommentCreateManyWithoutAdviceInput>;
}

export interface CommentCreateManyWithoutAdviceInput {
  create?: Maybe<
    CommentCreateWithoutAdviceInput[] | CommentCreateWithoutAdviceInput
  >;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
}

export interface CommentCreateWithoutAdviceInput {
  id?: Maybe<ID_Input>;
  content: String;
  owner?: Maybe<UserCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCommentsInput {
  id?: Maybe<ID_Input>;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: Maybe<String>;
  role: Role;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressCreateOneWithoutUsersInput>;
  activities?: Maybe<ActivityCreateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceCreateManyWithoutOwnerInput>;
}

export interface ActivityUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutActivitiesInput>;
  startAt?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  status?: Maybe<Status>;
  reply?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutActivitiesInput {
  create?: Maybe<UserCreateWithoutActivitiesInput>;
  update?: Maybe<UserUpdateWithoutActivitiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutActivitiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutActivitiesDataInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressUpdateOneWithoutUsersInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceUpdateManyWithoutOwnerInput>;
}

export interface AddressUpdateOneWithoutUsersInput {
  create?: Maybe<AddressCreateWithoutUsersInput>;
  update?: Maybe<AddressUpdateWithoutUsersDataInput>;
  upsert?: Maybe<AddressUpsertWithoutUsersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressUpdateWithoutUsersDataInput {
  building?: Maybe<Int>;
  unit?: Maybe<Int>;
  room?: Maybe<Int>;
}

export interface AddressUpsertWithoutUsersInput {
  update: AddressUpdateWithoutUsersDataInput;
  create: AddressCreateWithoutUsersInput;
}

export interface CommentUpdateManyWithoutOwnerInput {
  create?: Maybe<
    CommentCreateWithoutOwnerInput[] | CommentCreateWithoutOwnerInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutOwnerInput[]
    | CommentUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutOwnerInput[]
    | CommentUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutOwnerInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutOwnerDataInput;
}

export interface CommentUpdateWithoutOwnerDataInput {
  content?: Maybe<String>;
  advice?: Maybe<AdviceUpdateOneWithoutCommentsInput>;
}

export interface AdviceUpdateOneWithoutCommentsInput {
  create?: Maybe<AdviceCreateWithoutCommentsInput>;
  update?: Maybe<AdviceUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<AdviceUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AdviceWhereUniqueInput>;
}

export interface AdviceUpdateWithoutCommentsDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutAdvicesInput>;
}

export interface UserUpdateOneRequiredWithoutAdvicesInput {
  create?: Maybe<UserCreateWithoutAdvicesInput>;
  update?: Maybe<UserUpdateWithoutAdvicesDataInput>;
  upsert?: Maybe<UserUpsertWithoutAdvicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAdvicesDataInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressUpdateOneWithoutUsersInput>;
  activities?: Maybe<ActivityUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
}

export interface ActivityUpdateManyWithoutOwnerInput {
  create?: Maybe<
    ActivityCreateWithoutOwnerInput[] | ActivityCreateWithoutOwnerInput
  >;
  delete?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  set?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  disconnect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  update?: Maybe<
    | ActivityUpdateWithWhereUniqueWithoutOwnerInput[]
    | ActivityUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | ActivityUpsertWithWhereUniqueWithoutOwnerInput[]
    | ActivityUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  updateMany?: Maybe<
    | ActivityUpdateManyWithWhereNestedInput[]
    | ActivityUpdateManyWithWhereNestedInput
  >;
}

export interface ActivityUpdateWithWhereUniqueWithoutOwnerInput {
  where: ActivityWhereUniqueInput;
  data: ActivityUpdateWithoutOwnerDataInput;
}

export interface ActivityUpdateWithoutOwnerDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  status?: Maybe<Status>;
  reply?: Maybe<String>;
}

export interface ActivityUpsertWithWhereUniqueWithoutOwnerInput {
  where: ActivityWhereUniqueInput;
  update: ActivityUpdateWithoutOwnerDataInput;
  create: ActivityCreateWithoutOwnerInput;
}

export interface ActivityScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  startAt_not?: Maybe<DateTimeInput>;
  startAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startAt_lt?: Maybe<DateTimeInput>;
  startAt_lte?: Maybe<DateTimeInput>;
  startAt_gt?: Maybe<DateTimeInput>;
  startAt_gte?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  place_not?: Maybe<String>;
  place_in?: Maybe<String[] | String>;
  place_not_in?: Maybe<String[] | String>;
  place_lt?: Maybe<String>;
  place_lte?: Maybe<String>;
  place_gt?: Maybe<String>;
  place_gte?: Maybe<String>;
  place_contains?: Maybe<String>;
  place_not_contains?: Maybe<String>;
  place_starts_with?: Maybe<String>;
  place_not_starts_with?: Maybe<String>;
  place_ends_with?: Maybe<String>;
  place_not_ends_with?: Maybe<String>;
  status?: Maybe<Status>;
  status_not?: Maybe<Status>;
  status_in?: Maybe<Status[] | Status>;
  status_not_in?: Maybe<Status[] | Status>;
  reply?: Maybe<String>;
  reply_not?: Maybe<String>;
  reply_in?: Maybe<String[] | String>;
  reply_not_in?: Maybe<String[] | String>;
  reply_lt?: Maybe<String>;
  reply_lte?: Maybe<String>;
  reply_gt?: Maybe<String>;
  reply_gte?: Maybe<String>;
  reply_contains?: Maybe<String>;
  reply_not_contains?: Maybe<String>;
  reply_starts_with?: Maybe<String>;
  reply_not_starts_with?: Maybe<String>;
  reply_ends_with?: Maybe<String>;
  reply_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  OR?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  NOT?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
}

export interface ActivityUpdateManyWithWhereNestedInput {
  where: ActivityScalarWhereInput;
  data: ActivityUpdateManyDataInput;
}

export interface ActivityUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  status?: Maybe<Status>;
  reply?: Maybe<String>;
}

export interface UserUpsertWithoutAdvicesInput {
  update: UserUpdateWithoutAdvicesDataInput;
  create: UserCreateWithoutAdvicesInput;
}

export interface AdviceUpsertWithoutCommentsInput {
  update: AdviceUpdateWithoutCommentsDataInput;
  create: AdviceCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutOwnerInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutOwnerDataInput;
  create: CommentCreateWithoutOwnerInput;
}

export interface CommentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  OR?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  NOT?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface AdviceUpdateManyWithoutOwnerInput {
  create?: Maybe<
    AdviceCreateWithoutOwnerInput[] | AdviceCreateWithoutOwnerInput
  >;
  delete?: Maybe<AdviceWhereUniqueInput[] | AdviceWhereUniqueInput>;
  connect?: Maybe<AdviceWhereUniqueInput[] | AdviceWhereUniqueInput>;
  set?: Maybe<AdviceWhereUniqueInput[] | AdviceWhereUniqueInput>;
  disconnect?: Maybe<AdviceWhereUniqueInput[] | AdviceWhereUniqueInput>;
  update?: Maybe<
    | AdviceUpdateWithWhereUniqueWithoutOwnerInput[]
    | AdviceUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | AdviceUpsertWithWhereUniqueWithoutOwnerInput[]
    | AdviceUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<AdviceScalarWhereInput[] | AdviceScalarWhereInput>;
  updateMany?: Maybe<
    | AdviceUpdateManyWithWhereNestedInput[]
    | AdviceUpdateManyWithWhereNestedInput
  >;
}

export interface AdviceUpdateWithWhereUniqueWithoutOwnerInput {
  where: AdviceWhereUniqueInput;
  data: AdviceUpdateWithoutOwnerDataInput;
}

export interface AdviceUpdateWithoutOwnerDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  comments?: Maybe<CommentUpdateManyWithoutAdviceInput>;
}

export interface CommentUpdateManyWithoutAdviceInput {
  create?: Maybe<
    CommentCreateWithoutAdviceInput[] | CommentCreateWithoutAdviceInput
  >;
  delete?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  connect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  set?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  disconnect?: Maybe<CommentWhereUniqueInput[] | CommentWhereUniqueInput>;
  update?: Maybe<
    | CommentUpdateWithWhereUniqueWithoutAdviceInput[]
    | CommentUpdateWithWhereUniqueWithoutAdviceInput
  >;
  upsert?: Maybe<
    | CommentUpsertWithWhereUniqueWithoutAdviceInput[]
    | CommentUpsertWithWhereUniqueWithoutAdviceInput
  >;
  deleteMany?: Maybe<CommentScalarWhereInput[] | CommentScalarWhereInput>;
  updateMany?: Maybe<
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput
  >;
}

export interface CommentUpdateWithWhereUniqueWithoutAdviceInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutAdviceDataInput;
}

export interface CommentUpdateWithoutAdviceDataInput {
  content?: Maybe<String>;
  owner?: Maybe<UserUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutCommentsInput {
  create?: Maybe<UserCreateWithoutCommentsInput>;
  update?: Maybe<UserUpdateWithoutCommentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCommentsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCommentsDataInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressUpdateOneWithoutUsersInput>;
  activities?: Maybe<ActivityUpdateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceUpdateManyWithoutOwnerInput>;
}

export interface UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsDataInput;
  create: UserCreateWithoutCommentsInput;
}

export interface CommentUpsertWithWhereUniqueWithoutAdviceInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateWithoutAdviceDataInput;
  create: CommentCreateWithoutAdviceInput;
}

export interface AdviceUpsertWithWhereUniqueWithoutOwnerInput {
  where: AdviceWhereUniqueInput;
  update: AdviceUpdateWithoutOwnerDataInput;
  create: AdviceCreateWithoutOwnerInput;
}

export interface AdviceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AdviceScalarWhereInput[] | AdviceScalarWhereInput>;
  OR?: Maybe<AdviceScalarWhereInput[] | AdviceScalarWhereInput>;
  NOT?: Maybe<AdviceScalarWhereInput[] | AdviceScalarWhereInput>;
}

export interface AdviceUpdateManyWithWhereNestedInput {
  where: AdviceScalarWhereInput;
  data: AdviceUpdateManyDataInput;
}

export interface AdviceUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserUpsertWithoutActivitiesInput {
  update: UserUpdateWithoutActivitiesDataInput;
  create: UserCreateWithoutActivitiesInput;
}

export interface ActivityUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  startAt?: Maybe<DateTimeInput>;
  place?: Maybe<String>;
  status?: Maybe<Status>;
  reply?: Maybe<String>;
}

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  building: Int;
  unit: Int;
  room: Int;
  users?: Maybe<UserCreateManyWithoutAddressInput>;
}

export interface UserCreateManyWithoutAddressInput {
  create?: Maybe<
    UserCreateWithoutAddressInput[] | UserCreateWithoutAddressInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutAddressInput {
  id?: Maybe<ID_Input>;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: Maybe<String>;
  role: Role;
  sex?: Maybe<Sex>;
  activities?: Maybe<ActivityCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceCreateManyWithoutOwnerInput>;
}

export interface AddressUpdateInput {
  building?: Maybe<Int>;
  unit?: Maybe<Int>;
  room?: Maybe<Int>;
  users?: Maybe<UserUpdateManyWithoutAddressInput>;
}

export interface UserUpdateManyWithoutAddressInput {
  create?: Maybe<
    UserCreateWithoutAddressInput[] | UserCreateWithoutAddressInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutAddressInput[]
    | UserUpdateWithWhereUniqueWithoutAddressInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutAddressInput[]
    | UserUpsertWithWhereUniqueWithoutAddressInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutAddressInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutAddressDataInput;
}

export interface UserUpdateWithoutAddressDataInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
  activities?: Maybe<ActivityUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceUpdateManyWithoutOwnerInput>;
}

export interface UserUpsertWithWhereUniqueWithoutAddressInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutAddressDataInput;
  create: UserCreateWithoutAddressInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  phoneNumber_not?: Maybe<String>;
  phoneNumber_in?: Maybe<String[] | String>;
  phoneNumber_not_in?: Maybe<String[] | String>;
  phoneNumber_lt?: Maybe<String>;
  phoneNumber_lte?: Maybe<String>;
  phoneNumber_gt?: Maybe<String>;
  phoneNumber_gte?: Maybe<String>;
  phoneNumber_contains?: Maybe<String>;
  phoneNumber_not_contains?: Maybe<String>;
  phoneNumber_starts_with?: Maybe<String>;
  phoneNumber_not_starts_with?: Maybe<String>;
  phoneNumber_ends_with?: Maybe<String>;
  phoneNumber_not_ends_with?: Maybe<String>;
  idNumber?: Maybe<String>;
  idNumber_not?: Maybe<String>;
  idNumber_in?: Maybe<String[] | String>;
  idNumber_not_in?: Maybe<String[] | String>;
  idNumber_lt?: Maybe<String>;
  idNumber_lte?: Maybe<String>;
  idNumber_gt?: Maybe<String>;
  idNumber_gte?: Maybe<String>;
  idNumber_contains?: Maybe<String>;
  idNumber_not_contains?: Maybe<String>;
  idNumber_starts_with?: Maybe<String>;
  idNumber_not_starts_with?: Maybe<String>;
  idNumber_ends_with?: Maybe<String>;
  idNumber_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  sex?: Maybe<Sex>;
  sex_not?: Maybe<Sex>;
  sex_in?: Maybe<Sex[] | Sex>;
  sex_not_in?: Maybe<Sex[] | Sex>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
}

export interface AddressUpdateManyMutationInput {
  building?: Maybe<Int>;
  unit?: Maybe<Int>;
  room?: Maybe<Int>;
}

export interface AdviceCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  content: String;
  owner: UserCreateOneWithoutAdvicesInput;
  comments?: Maybe<CommentCreateManyWithoutAdviceInput>;
}

export interface AdviceUpdateInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
  owner?: Maybe<UserUpdateOneRequiredWithoutAdvicesInput>;
  comments?: Maybe<CommentUpdateManyWithoutAdviceInput>;
}

export interface AdviceUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CommentCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  owner?: Maybe<UserCreateOneWithoutCommentsInput>;
  advice?: Maybe<AdviceCreateOneWithoutCommentsInput>;
}

export interface CommentUpdateInput {
  content?: Maybe<String>;
  owner?: Maybe<UserUpdateOneWithoutCommentsInput>;
  advice?: Maybe<AdviceUpdateOneWithoutCommentsInput>;
}

export interface CommentUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface FileCreateInput {
  id?: Maybe<ID_Input>;
  path: String;
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FileUpdateInput {
  path?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
}

export interface FileUpdateManyMutationInput {
  path?: Maybe<String>;
  filename?: Maybe<String>;
  mimetype?: Maybe<String>;
  encoding?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: Maybe<String>;
  role: Role;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressCreateOneWithoutUsersInput>;
  activities?: Maybe<ActivityCreateManyWithoutOwnerInput>;
  comments?: Maybe<CommentCreateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceCreateManyWithoutOwnerInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
  address?: Maybe<AddressUpdateOneWithoutUsersInput>;
  activities?: Maybe<ActivityUpdateManyWithoutOwnerInput>;
  comments?: Maybe<CommentUpdateManyWithoutOwnerInput>;
  advices?: Maybe<AdviceUpdateManyWithoutOwnerInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  phoneNumber?: Maybe<String>;
  idNumber?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<Role>;
  sex?: Maybe<Sex>;
}

export interface ActivitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityWhereInput>;
  AND?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
  OR?: Maybe<ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput>;
  NOT?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface AdviceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdviceWhereInput>;
  AND?: Maybe<AdviceSubscriptionWhereInput[] | AdviceSubscriptionWhereInput>;
  OR?: Maybe<AdviceSubscriptionWhereInput[] | AdviceSubscriptionWhereInput>;
  NOT?: Maybe<AdviceSubscriptionWhereInput[] | AdviceSubscriptionWhereInput>;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CommentWhereInput>;
  AND?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  OR?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
  NOT?: Maybe<CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput>;
}

export interface FileSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FileWhereInput>;
  AND?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  OR?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
  NOT?: Maybe<FileSubscriptionWhereInput[] | FileSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Activity {
  id: ID_Output;
  title: String;
  content: String;
  startAt: DateTimeOutput;
  place: String;
  status: Status;
  reply?: String;
  createdAt: DateTimeOutput;
}

export interface ActivityPromise extends Promise<Activity>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  startAt: () => Promise<DateTimeOutput>;
  place: () => Promise<String>;
  status: () => Promise<Status>;
  reply: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivitySubscription
  extends Promise<AsyncIterator<Activity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  startAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  place: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  reply: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ActivityNullablePromise
  extends Promise<Activity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  startAt: () => Promise<DateTimeOutput>;
  place: () => Promise<String>;
  status: () => Promise<Status>;
  reply: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: String;
  role: Role;
  sex?: Sex;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  idNumber: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  sex: () => Promise<Sex>;
  address: <T = AddressPromise>() => T;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  advices: <T = FragmentableArray<Advice>>(args?: {
    where?: AdviceWhereInput;
    orderBy?: AdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  idNumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  sex: () => Promise<AsyncIterator<Sex>>;
  address: <T = AddressSubscription>() => T;
  activities: <T = Promise<AsyncIterator<ActivitySubscription>>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  advices: <T = Promise<AsyncIterator<AdviceSubscription>>>(args?: {
    where?: AdviceWhereInput;
    orderBy?: AdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  idNumber: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  sex: () => Promise<Sex>;
  address: <T = AddressPromise>() => T;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  advices: <T = FragmentableArray<Advice>>(args?: {
    where?: AdviceWhereInput;
    orderBy?: AdviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Address {
  id: ID_Output;
  building: Int;
  unit: Int;
  room: Int;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  building: () => Promise<Int>;
  unit: () => Promise<Int>;
  room: () => Promise<Int>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  building: () => Promise<AsyncIterator<Int>>;
  unit: () => Promise<AsyncIterator<Int>>;
  room: () => Promise<AsyncIterator<Int>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  building: () => Promise<Int>;
  unit: () => Promise<Int>;
  room: () => Promise<Int>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Comment {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  advice: <T = AdvicePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  advice: <T = AdviceSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentNullablePromise
  extends Promise<Comment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  advice: <T = AdvicePromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Advice {
  id: ID_Output;
  title: String;
  content: String;
  createdAt: DateTimeOutput;
}

export interface AdvicePromise extends Promise<Advice>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AdviceSubscription
  extends Promise<AsyncIterator<Advice>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  owner: <T = UserSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AdviceNullablePromise
  extends Promise<Advice | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  owner: <T = UserPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(args?: {
    where?: CommentWhereInput;
    orderBy?: CommentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityConnection {
  pageInfo: PageInfo;
  edges: ActivityEdge[];
}

export interface ActivityConnectionPromise
  extends Promise<ActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityEdge>>() => T;
  aggregate: <T = AggregateActivityPromise>() => T;
}

export interface ActivityConnectionSubscription
  extends Promise<AsyncIterator<ActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ActivityEdge {
  node: Activity;
  cursor: String;
}

export interface ActivityEdgePromise
  extends Promise<ActivityEdge>,
    Fragmentable {
  node: <T = ActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityEdgeSubscription
  extends Promise<AsyncIterator<ActivityEdge>>,
    Fragmentable {
  node: <T = ActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateActivity {
  count: Int;
}

export interface AggregateActivityPromise
  extends Promise<AggregateActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySubscription
  extends Promise<AsyncIterator<AggregateActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdviceConnection {
  pageInfo: PageInfo;
  edges: AdviceEdge[];
}

export interface AdviceConnectionPromise
  extends Promise<AdviceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdviceEdge>>() => T;
  aggregate: <T = AggregateAdvicePromise>() => T;
}

export interface AdviceConnectionSubscription
  extends Promise<AsyncIterator<AdviceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdviceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdviceSubscription>() => T;
}

export interface AdviceEdge {
  node: Advice;
  cursor: String;
}

export interface AdviceEdgePromise extends Promise<AdviceEdge>, Fragmentable {
  node: <T = AdvicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdviceEdgeSubscription
  extends Promise<AsyncIterator<AdviceEdge>>,
    Fragmentable {
  node: <T = AdviceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAdvice {
  count: Int;
}

export interface AggregateAdvicePromise
  extends Promise<AggregateAdvice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdviceSubscription
  extends Promise<AsyncIterator<AggregateAdvice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface File {
  id: ID_Output;
  path: String;
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FilePromise extends Promise<File>, Fragmentable {
  id: () => Promise<ID_Output>;
  path: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FileSubscription
  extends Promise<AsyncIterator<File>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  path: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
}

export interface FileNullablePromise
  extends Promise<File | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  path: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FileConnection {
  pageInfo: PageInfo;
  edges: FileEdge[];
}

export interface FileConnectionPromise
  extends Promise<FileConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FileEdge>>() => T;
  aggregate: <T = AggregateFilePromise>() => T;
}

export interface FileConnectionSubscription
  extends Promise<AsyncIterator<FileConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FileEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFileSubscription>() => T;
}

export interface FileEdge {
  node: File;
  cursor: String;
}

export interface FileEdgePromise extends Promise<FileEdge>, Fragmentable {
  node: <T = FilePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FileEdgeSubscription
  extends Promise<AsyncIterator<FileEdge>>,
    Fragmentable {
  node: <T = FileSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFile {
  count: Int;
}

export interface AggregateFilePromise
  extends Promise<AggregateFile>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFileSubscription
  extends Promise<AsyncIterator<AggregateFile>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ActivitySubscriptionPayload {
  mutation: MutationType;
  node: Activity;
  updatedFields: String[];
  previousValues: ActivityPreviousValues;
}

export interface ActivitySubscriptionPayloadPromise
  extends Promise<ActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityPreviousValuesPromise>() => T;
}

export interface ActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityPreviousValuesSubscription>() => T;
}

export interface ActivityPreviousValues {
  id: ID_Output;
  title: String;
  content: String;
  startAt: DateTimeOutput;
  place: String;
  status: Status;
  reply?: String;
  createdAt: DateTimeOutput;
}

export interface ActivityPreviousValuesPromise
  extends Promise<ActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  startAt: () => Promise<DateTimeOutput>;
  place: () => Promise<String>;
  status: () => Promise<Status>;
  reply: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  startAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  place: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<Status>>;
  reply: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  building: Int;
  unit: Int;
  room: Int;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  building: () => Promise<Int>;
  unit: () => Promise<Int>;
  room: () => Promise<Int>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  building: () => Promise<AsyncIterator<Int>>;
  unit: () => Promise<AsyncIterator<Int>>;
  room: () => Promise<AsyncIterator<Int>>;
}

export interface AdviceSubscriptionPayload {
  mutation: MutationType;
  node: Advice;
  updatedFields: String[];
  previousValues: AdvicePreviousValues;
}

export interface AdviceSubscriptionPayloadPromise
  extends Promise<AdviceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdvicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdvicePreviousValuesPromise>() => T;
}

export interface AdviceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdviceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdviceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdvicePreviousValuesSubscription>() => T;
}

export interface AdvicePreviousValues {
  id: ID_Output;
  title: String;
  content: String;
  createdAt: DateTimeOutput;
}

export interface AdvicePreviousValuesPromise
  extends Promise<AdvicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AdvicePreviousValuesSubscription
  extends Promise<AsyncIterator<AdvicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface FileSubscriptionPayload {
  mutation: MutationType;
  node: File;
  updatedFields: String[];
  previousValues: FilePreviousValues;
}

export interface FileSubscriptionPayloadPromise
  extends Promise<FileSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FilePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FilePreviousValuesPromise>() => T;
}

export interface FileSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FileSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FileSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FilePreviousValuesSubscription>() => T;
}

export interface FilePreviousValues {
  id: ID_Output;
  path: String;
  filename: String;
  mimetype: String;
  encoding: String;
}

export interface FilePreviousValuesPromise
  extends Promise<FilePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  path: () => Promise<String>;
  filename: () => Promise<String>;
  mimetype: () => Promise<String>;
  encoding: () => Promise<String>;
}

export interface FilePreviousValuesSubscription
  extends Promise<AsyncIterator<FilePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  path: () => Promise<AsyncIterator<String>>;
  filename: () => Promise<AsyncIterator<String>>;
  mimetype: () => Promise<AsyncIterator<String>>;
  encoding: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  phoneNumber: String;
  idNumber: String;
  password?: String;
  role: Role;
  sex?: Sex;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  idNumber: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<Role>;
  sex: () => Promise<Sex>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  idNumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  sex: () => Promise<AsyncIterator<Sex>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Activity",
    embedded: false
  },
  {
    name: "Advice",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  },
  {
    name: "File",
    embedded: false
  },
  {
    name: "Sex",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "Status",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`,
  secret: `Nero`
});
export const prisma = new Prisma();

/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Address: AddressObject
      Activity: ActivityObject
      Comment: CommentObject
      Advice: AdviceObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      AddressConnection: AddressConnectionObject
      AddressEdge: AddressEdgeObject
      AggregateAddress: AggregateAddressObject
      ActivityConnection: ActivityConnectionObject
      ActivityEdge: ActivityEdgeObject
      AggregateActivity: AggregateActivityObject
      AdviceConnection: AdviceConnectionObject
      AdviceEdge: AdviceEdgeObject
      AggregateAdvice: AggregateAdviceObject
      CommentConnection: CommentConnectionObject
      CommentEdge: CommentEdgeObject
      AggregateComment: AggregateCommentObject
      File: FileObject
      FileConnection: FileConnectionObject
      FileEdge: FileEdgeObject
      AggregateFile: AggregateFileObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      AddressSubscriptionPayload: AddressSubscriptionPayloadObject
      AddressPreviousValues: AddressPreviousValuesObject
      ActivitySubscriptionPayload: ActivitySubscriptionPayloadObject
      ActivityPreviousValues: ActivityPreviousValuesObject
      AdviceSubscriptionPayload: AdviceSubscriptionPayloadObject
      AdvicePreviousValues: AdvicePreviousValuesObject
      CommentSubscriptionPayload: CommentSubscriptionPayloadObject
      CommentPreviousValues: CommentPreviousValuesObject
      FileSubscriptionPayload: FileSubscriptionPayloadObject
      FilePreviousValues: FilePreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Address: AddressFieldDetails
      Activity: ActivityFieldDetails
      Comment: CommentFieldDetails
      Advice: AdviceFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      AddressConnection: AddressConnectionFieldDetails
      AddressEdge: AddressEdgeFieldDetails
      AggregateAddress: AggregateAddressFieldDetails
      ActivityConnection: ActivityConnectionFieldDetails
      ActivityEdge: ActivityEdgeFieldDetails
      AggregateActivity: AggregateActivityFieldDetails
      AdviceConnection: AdviceConnectionFieldDetails
      AdviceEdge: AdviceEdgeFieldDetails
      AggregateAdvice: AggregateAdviceFieldDetails
      CommentConnection: CommentConnectionFieldDetails
      CommentEdge: CommentEdgeFieldDetails
      AggregateComment: AggregateCommentFieldDetails
      File: FileFieldDetails
      FileConnection: FileConnectionFieldDetails
      FileEdge: FileEdgeFieldDetails
      AggregateFile: AggregateFileFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      AddressSubscriptionPayload: AddressSubscriptionPayloadFieldDetails
      AddressPreviousValues: AddressPreviousValuesFieldDetails
      ActivitySubscriptionPayload: ActivitySubscriptionPayloadFieldDetails
      ActivityPreviousValues: ActivityPreviousValuesFieldDetails
      AdviceSubscriptionPayload: AdviceSubscriptionPayloadFieldDetails
      AdvicePreviousValues: AdvicePreviousValuesFieldDetails
      CommentSubscriptionPayload: CommentSubscriptionPayloadFieldDetails
      CommentPreviousValues: CommentPreviousValuesFieldDetails
      FileSubscriptionPayload: FileSubscriptionPayloadFieldDetails
      FilePreviousValues: FilePreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      UserWhereInput: UserWhereInputInputObject
      AddressWhereInput: AddressWhereInputInputObject
      ActivityWhereInput: ActivityWhereInputInputObject
      CommentWhereInput: CommentWhereInputInputObject
      AdviceWhereInput: AdviceWhereInputInputObject
      AddressWhereUniqueInput: AddressWhereUniqueInputInputObject
      ActivityWhereUniqueInput: ActivityWhereUniqueInputInputObject
      AdviceWhereUniqueInput: AdviceWhereUniqueInputInputObject
      CommentWhereUniqueInput: CommentWhereUniqueInputInputObject
      FileWhereUniqueInput: FileWhereUniqueInputInputObject
      FileWhereInput: FileWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      AddressCreateOneWithoutUsersInput: AddressCreateOneWithoutUsersInputInputObject
      AddressCreateWithoutUsersInput: AddressCreateWithoutUsersInputInputObject
      ActivityCreateManyWithoutOwnerInput: ActivityCreateManyWithoutOwnerInputInputObject
      ActivityCreateWithoutOwnerInput: ActivityCreateWithoutOwnerInputInputObject
      CommentCreateManyWithoutOwnerInput: CommentCreateManyWithoutOwnerInputInputObject
      CommentCreateWithoutOwnerInput: CommentCreateWithoutOwnerInputInputObject
      AdviceCreateOneWithoutCommentsInput: AdviceCreateOneWithoutCommentsInputInputObject
      AdviceCreateWithoutCommentsInput: AdviceCreateWithoutCommentsInputInputObject
      UserCreateOneWithoutAdvicesInput: UserCreateOneWithoutAdvicesInputInputObject
      UserCreateWithoutAdvicesInput: UserCreateWithoutAdvicesInputInputObject
      AdviceCreateManyWithoutOwnerInput: AdviceCreateManyWithoutOwnerInputInputObject
      AdviceCreateWithoutOwnerInput: AdviceCreateWithoutOwnerInputInputObject
      CommentCreateManyWithoutAdviceInput: CommentCreateManyWithoutAdviceInputInputObject
      CommentCreateWithoutAdviceInput: CommentCreateWithoutAdviceInputInputObject
      UserCreateOneWithoutCommentsInput: UserCreateOneWithoutCommentsInputInputObject
      UserCreateWithoutCommentsInput: UserCreateWithoutCommentsInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      AddressUpdateOneWithoutUsersInput: AddressUpdateOneWithoutUsersInputInputObject
      AddressUpdateWithoutUsersDataInput: AddressUpdateWithoutUsersDataInputInputObject
      AddressUpsertWithoutUsersInput: AddressUpsertWithoutUsersInputInputObject
      ActivityUpdateManyWithoutOwnerInput: ActivityUpdateManyWithoutOwnerInputInputObject
      ActivityUpdateWithWhereUniqueWithoutOwnerInput: ActivityUpdateWithWhereUniqueWithoutOwnerInputInputObject
      ActivityUpdateWithoutOwnerDataInput: ActivityUpdateWithoutOwnerDataInputInputObject
      ActivityUpsertWithWhereUniqueWithoutOwnerInput: ActivityUpsertWithWhereUniqueWithoutOwnerInputInputObject
      ActivityScalarWhereInput: ActivityScalarWhereInputInputObject
      ActivityUpdateManyWithWhereNestedInput: ActivityUpdateManyWithWhereNestedInputInputObject
      ActivityUpdateManyDataInput: ActivityUpdateManyDataInputInputObject
      CommentUpdateManyWithoutOwnerInput: CommentUpdateManyWithoutOwnerInputInputObject
      CommentUpdateWithWhereUniqueWithoutOwnerInput: CommentUpdateWithWhereUniqueWithoutOwnerInputInputObject
      CommentUpdateWithoutOwnerDataInput: CommentUpdateWithoutOwnerDataInputInputObject
      AdviceUpdateOneWithoutCommentsInput: AdviceUpdateOneWithoutCommentsInputInputObject
      AdviceUpdateWithoutCommentsDataInput: AdviceUpdateWithoutCommentsDataInputInputObject
      UserUpdateOneRequiredWithoutAdvicesInput: UserUpdateOneRequiredWithoutAdvicesInputInputObject
      UserUpdateWithoutAdvicesDataInput: UserUpdateWithoutAdvicesDataInputInputObject
      UserUpsertWithoutAdvicesInput: UserUpsertWithoutAdvicesInputInputObject
      AdviceUpsertWithoutCommentsInput: AdviceUpsertWithoutCommentsInputInputObject
      CommentUpsertWithWhereUniqueWithoutOwnerInput: CommentUpsertWithWhereUniqueWithoutOwnerInputInputObject
      CommentScalarWhereInput: CommentScalarWhereInputInputObject
      CommentUpdateManyWithWhereNestedInput: CommentUpdateManyWithWhereNestedInputInputObject
      CommentUpdateManyDataInput: CommentUpdateManyDataInputInputObject
      AdviceUpdateManyWithoutOwnerInput: AdviceUpdateManyWithoutOwnerInputInputObject
      AdviceUpdateWithWhereUniqueWithoutOwnerInput: AdviceUpdateWithWhereUniqueWithoutOwnerInputInputObject
      AdviceUpdateWithoutOwnerDataInput: AdviceUpdateWithoutOwnerDataInputInputObject
      CommentUpdateManyWithoutAdviceInput: CommentUpdateManyWithoutAdviceInputInputObject
      CommentUpdateWithWhereUniqueWithoutAdviceInput: CommentUpdateWithWhereUniqueWithoutAdviceInputInputObject
      CommentUpdateWithoutAdviceDataInput: CommentUpdateWithoutAdviceDataInputInputObject
      UserUpdateOneWithoutCommentsInput: UserUpdateOneWithoutCommentsInputInputObject
      UserUpdateWithoutCommentsDataInput: UserUpdateWithoutCommentsDataInputInputObject
      UserUpsertWithoutCommentsInput: UserUpsertWithoutCommentsInputInputObject
      CommentUpsertWithWhereUniqueWithoutAdviceInput: CommentUpsertWithWhereUniqueWithoutAdviceInputInputObject
      AdviceUpsertWithWhereUniqueWithoutOwnerInput: AdviceUpsertWithWhereUniqueWithoutOwnerInputInputObject
      AdviceScalarWhereInput: AdviceScalarWhereInputInputObject
      AdviceUpdateManyWithWhereNestedInput: AdviceUpdateManyWithWhereNestedInputInputObject
      AdviceUpdateManyDataInput: AdviceUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      AddressCreateInput: AddressCreateInputInputObject
      UserCreateManyWithoutAddressInput: UserCreateManyWithoutAddressInputInputObject
      UserCreateWithoutAddressInput: UserCreateWithoutAddressInputInputObject
      AddressUpdateInput: AddressUpdateInputInputObject
      UserUpdateManyWithoutAddressInput: UserUpdateManyWithoutAddressInputInputObject
      UserUpdateWithWhereUniqueWithoutAddressInput: UserUpdateWithWhereUniqueWithoutAddressInputInputObject
      UserUpdateWithoutAddressDataInput: UserUpdateWithoutAddressDataInputInputObject
      UserUpsertWithWhereUniqueWithoutAddressInput: UserUpsertWithWhereUniqueWithoutAddressInputInputObject
      UserScalarWhereInput: UserScalarWhereInputInputObject
      UserUpdateManyWithWhereNestedInput: UserUpdateManyWithWhereNestedInputInputObject
      UserUpdateManyDataInput: UserUpdateManyDataInputInputObject
      AddressUpdateManyMutationInput: AddressUpdateManyMutationInputInputObject
      ActivityCreateInput: ActivityCreateInputInputObject
      UserCreateOneWithoutActivitiesInput: UserCreateOneWithoutActivitiesInputInputObject
      UserCreateWithoutActivitiesInput: UserCreateWithoutActivitiesInputInputObject
      ActivityUpdateInput: ActivityUpdateInputInputObject
      UserUpdateOneRequiredWithoutActivitiesInput: UserUpdateOneRequiredWithoutActivitiesInputInputObject
      UserUpdateWithoutActivitiesDataInput: UserUpdateWithoutActivitiesDataInputInputObject
      UserUpsertWithoutActivitiesInput: UserUpsertWithoutActivitiesInputInputObject
      ActivityUpdateManyMutationInput: ActivityUpdateManyMutationInputInputObject
      AdviceCreateInput: AdviceCreateInputInputObject
      AdviceUpdateInput: AdviceUpdateInputInputObject
      AdviceUpdateManyMutationInput: AdviceUpdateManyMutationInputInputObject
      CommentCreateInput: CommentCreateInputInputObject
      CommentUpdateInput: CommentUpdateInputInputObject
      CommentUpdateManyMutationInput: CommentUpdateManyMutationInputInputObject
      FileCreateInput: FileCreateInputInputObject
      FileUpdateInput: FileUpdateInputInputObject
      FileUpdateManyMutationInput: FileUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      AddressSubscriptionWhereInput: AddressSubscriptionWhereInputInputObject
      ActivitySubscriptionWhereInput: ActivitySubscriptionWhereInputInputObject
      AdviceSubscriptionWhereInput: AdviceSubscriptionWhereInputInputObject
      CommentSubscriptionWhereInput: CommentSubscriptionWhereInputInputObject
      FileSubscriptionWhereInput: FileSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Role: RoleValues,
    Sex: SexValues,
    Status: StatusValues,
    UserOrderByInput: UserOrderByInputValues,
    ActivityOrderByInput: ActivityOrderByInputValues,
    CommentOrderByInput: CommentOrderByInputValues,
    AdviceOrderByInput: AdviceOrderByInputValues,
    AddressOrderByInput: AddressOrderByInputValues,
    FileOrderByInput: FileOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'address', args?: QueryAddressArgs[] | false, alias?: string  } 
  | { name: 'addresses', args?: QueryAddressesArgs[] | false, alias?: string  } 
  | { name: 'addressesConnection', args?: QueryAddressesConnectionArgs[] | false, alias?: string  } 
  | { name: 'activity', args?: QueryActivityArgs[] | false, alias?: string  } 
  | { name: 'activities', args?: QueryActivitiesArgs[] | false, alias?: string  } 
  | { name: 'activitiesConnection', args?: QueryActivitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'advice', args?: QueryAdviceArgs[] | false, alias?: string  } 
  | { name: 'advices', args?: QueryAdvicesArgs[] | false, alias?: string  } 
  | { name: 'advicesConnection', args?: QueryAdvicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'comment', args?: QueryCommentArgs[] | false, alias?: string  } 
  | { name: 'comments', args?: QueryCommentsArgs[] | false, alias?: string  } 
  | { name: 'commentsConnection', args?: QueryCommentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'file', args?: QueryFileArgs[] | false, alias?: string  } 
  | { name: 'files', args?: QueryFilesArgs[] | false, alias?: string  } 
  | { name: 'filesConnection', args?: QueryFilesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'address'
  | 'addresses'
  | 'addressesConnection'
  | 'activity'
  | 'activities'
  | 'activitiesConnection'
  | 'advice'
  | 'advices'
  | 'advicesConnection'
  | 'comment'
  | 'comments'
  | 'commentsConnection'
  | 'file'
  | 'files'
  | 'filesConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAddressArgs =
  | 'where'
type QueryAddressesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAddressesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActivityArgs =
  | 'where'
type QueryActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAdviceArgs =
  | 'where'
type QueryAdvicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAdvicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCommentArgs =
  | 'where'
type QueryCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCommentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFileArgs =
  | 'where'
type QueryFilesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFilesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  address: {
    type: 'Address'
    args: Record<QueryAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  addresses: {
    type: 'Address'
    args: Record<QueryAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address[]> | prisma.Address[]
  }
  addressesConnection: {
    type: 'AddressConnection'
    args: Record<QueryAddressesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AddressWhereInput | null, orderBy?: prisma.AddressOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressConnection> | prisma.AddressConnection
  }
  activity: {
    type: 'Activity'
    args: Record<QueryActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  activities: {
    type: 'Activity'
    args: Record<QueryActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActivityWhereInput | null, orderBy?: prisma.ActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity[]> | prisma.Activity[]
  }
  activitiesConnection: {
    type: 'ActivityConnection'
    args: Record<QueryActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ActivityWhereInput | null, orderBy?: prisma.ActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivityConnection> | prisma.ActivityConnection
  }
  advice: {
    type: 'Advice'
    args: Record<QueryAdviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AdviceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice | null> | prisma.Advice | null
  }
  advices: {
    type: 'Advice'
    args: Record<QueryAdvicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AdviceWhereInput | null, orderBy?: prisma.AdviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice[]> | prisma.Advice[]
  }
  advicesConnection: {
    type: 'AdviceConnection'
    args: Record<QueryAdvicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AdviceWhereInput | null, orderBy?: prisma.AdviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdviceConnection> | prisma.AdviceConnection
  }
  comment: {
    type: 'Comment'
    args: Record<QueryCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  comments: {
    type: 'Comment'
    args: Record<QueryCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
  commentsConnection: {
    type: 'CommentConnection'
    args: Record<QueryCommentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentConnection> | prisma.CommentConnection
  }
  file: {
    type: 'File'
    args: Record<QueryFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  files: {
    type: 'File'
    args: Record<QueryFilesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File[]> | prisma.File[]
  }
  filesConnection: {
    type: 'FileConnection'
    args: Record<QueryFilesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FileWhereInput | null, orderBy?: prisma.FileOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileConnection> | prisma.FileConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'phoneNumber', args?: [] | false, alias?: string  } 
  | { name: 'idNumber', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'sex', args?: [] | false, alias?: string  } 
  | { name: 'address', args?: [] | false, alias?: string  } 
  | { name: 'activities', args?: UserActivitiesArgs[] | false, alias?: string  } 
  | { name: 'comments', args?: UserCommentsArgs[] | false, alias?: string  } 
  | { name: 'advices', args?: UserAdvicesArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'name'
  | 'phoneNumber'
  | 'idNumber'
  | 'password'
  | 'role'
  | 'sex'
  | 'address'
  | 'activities'
  | 'comments'
  | 'advices'


type UserActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserAdvicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phoneNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  idNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  sex: {
    type: 'Sex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sex | null> | prisma.Sex | null
  }
  address: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  activities: {
    type: 'Activity'
    args: Record<UserActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ActivityWhereInput | null, orderBy?: prisma.ActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity[]> | prisma.Activity[]
  }
  comments: {
    type: 'Comment'
    args: Record<UserCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
  advices: {
    type: 'Advice'
    args: Record<UserAdvicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: AdviceWhereInput | null, orderBy?: prisma.AdviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice[]> | prisma.Advice[]
  }
}
  

// Types for Address

type AddressObject =
  | AddressFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'building', args?: [] | false, alias?: string  } 
  | { name: 'unit', args?: [] | false, alias?: string  } 
  | { name: 'room', args?: [] | false, alias?: string  } 
  | { name: 'users', args?: AddressUsersArgs[] | false, alias?: string  } 

type AddressFields =
  | 'id'
  | 'building'
  | 'unit'
  | 'room'
  | 'users'


type AddressUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface AddressFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  building: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  unit: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  room: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  users: {
    type: 'User'
    args: Record<AddressUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Address">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
}
  

// Types for Activity

type ActivityObject =
  | ActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'startAt', args?: [] | false, alias?: string  } 
  | { name: 'place', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'reply', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type ActivityFields =
  | 'id'
  | 'title'
  | 'content'
  | 'owner'
  | 'startAt'
  | 'place'
  | 'status'
  | 'reply'
  | 'createdAt'



  

export interface ActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Activity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  startAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  place: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Activity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  reply: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Comment

type CommentObject =
  | CommentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'advice', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type CommentFields =
  | 'id'
  | 'content'
  | 'owner'
  | 'advice'
  | 'createdAt'



  

export interface CommentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  advice: {
    type: 'Advice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Comment">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice | null> | prisma.Advice | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Advice

type AdviceObject =
  | AdviceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'comments', args?: AdviceCommentsArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type AdviceFields =
  | 'id'
  | 'title'
  | 'content'
  | 'owner'
  | 'comments'
  | 'createdAt'


type AdviceCommentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface AdviceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Advice">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  comments: {
    type: 'Comment'
    args: Record<AdviceCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Advice">,
      args: { where?: CommentWhereInput | null, orderBy?: prisma.CommentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment[]> | prisma.Comment[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AddressConnection

type AddressConnectionObject =
  | AddressConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AddressConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AddressConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AddressEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressEdge[]> | prisma.AddressEdge[]
  }
  aggregate: {
    type: 'AggregateAddress'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAddress> | prisma.AggregateAddress
  }
}
  

// Types for AddressEdge

type AddressEdgeObject =
  | AddressEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AddressEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AddressEdgeFieldDetails {
  node: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAddress

type AggregateAddressObject =
  | AggregateAddressFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAddressFields =
  | 'count'



  

export interface AggregateAddressFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ActivityConnection

type ActivityConnectionObject =
  | ActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivityEdge[]> | prisma.ActivityEdge[]
  }
  aggregate: {
    type: 'AggregateActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateActivity> | prisma.AggregateActivity
  }
}
  

// Types for ActivityEdge

type ActivityEdgeObject =
  | ActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ActivityEdgeFieldDetails {
  node: {
    type: 'Activity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateActivity

type AggregateActivityObject =
  | AggregateActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateActivityFields =
  | 'count'



  

export interface AggregateActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AdviceConnection

type AdviceConnectionObject =
  | AdviceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AdviceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AdviceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdviceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AdviceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AdviceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdviceEdge[]> | prisma.AdviceEdge[]
  }
  aggregate: {
    type: 'AggregateAdvice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdviceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAdvice> | prisma.AggregateAdvice
  }
}
  

// Types for AdviceEdge

type AdviceEdgeObject =
  | AdviceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AdviceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AdviceEdgeFieldDetails {
  node: {
    type: 'Advice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdviceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice> | prisma.Advice
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAdvice

type AggregateAdviceObject =
  | AggregateAdviceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAdviceFields =
  | 'count'



  

export interface AggregateAdviceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CommentConnection

type CommentConnectionObject =
  | CommentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CommentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CommentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CommentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentEdge[]> | prisma.CommentEdge[]
  }
  aggregate: {
    type: 'AggregateComment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateComment> | prisma.AggregateComment
  }
}
  

// Types for CommentEdge

type CommentEdgeObject =
  | CommentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CommentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CommentEdgeFieldDetails {
  node: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateComment

type AggregateCommentObject =
  | AggregateCommentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCommentFields =
  | 'count'



  

export interface AggregateCommentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for File

type FileObject =
  | FileFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'path', args?: [] | false, alias?: string  } 
  | { name: 'filename', args?: [] | false, alias?: string  } 
  | { name: 'mimetype', args?: [] | false, alias?: string  } 
  | { name: 'encoding', args?: [] | false, alias?: string  } 

type FileFields =
  | 'id'
  | 'path'
  | 'filename'
  | 'mimetype'
  | 'encoding'



  

export interface FileFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  path: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  filename: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mimetype: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  encoding: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FileConnection

type FileConnectionObject =
  | FileConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FileConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FileConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FileEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileEdge[]> | prisma.FileEdge[]
  }
  aggregate: {
    type: 'AggregateFile'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFile> | prisma.AggregateFile
  }
}
  

// Types for FileEdge

type FileEdgeObject =
  | FileEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FileEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FileEdgeFieldDetails {
  node: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFile

type AggregateFileObject =
  | AggregateFileFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFileFields =
  | 'count'



  

export interface AggregateFileFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createAddress', args?: MutationCreateAddressArgs[] | false, alias?: string  } 
  | { name: 'updateAddress', args?: MutationUpdateAddressArgs[] | false, alias?: string  } 
  | { name: 'updateManyAddresses', args?: MutationUpdateManyAddressesArgs[] | false, alias?: string  } 
  | { name: 'upsertAddress', args?: MutationUpsertAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteAddress', args?: MutationDeleteAddressArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAddresses', args?: MutationDeleteManyAddressesArgs[] | false, alias?: string  } 
  | { name: 'createActivity', args?: MutationCreateActivityArgs[] | false, alias?: string  } 
  | { name: 'updateActivity', args?: MutationUpdateActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyActivities', args?: MutationUpdateManyActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertActivity', args?: MutationUpsertActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteActivity', args?: MutationDeleteActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyActivities', args?: MutationDeleteManyActivitiesArgs[] | false, alias?: string  } 
  | { name: 'createAdvice', args?: MutationCreateAdviceArgs[] | false, alias?: string  } 
  | { name: 'updateAdvice', args?: MutationUpdateAdviceArgs[] | false, alias?: string  } 
  | { name: 'updateManyAdvices', args?: MutationUpdateManyAdvicesArgs[] | false, alias?: string  } 
  | { name: 'upsertAdvice', args?: MutationUpsertAdviceArgs[] | false, alias?: string  } 
  | { name: 'deleteAdvice', args?: MutationDeleteAdviceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAdvices', args?: MutationDeleteManyAdvicesArgs[] | false, alias?: string  } 
  | { name: 'createComment', args?: MutationCreateCommentArgs[] | false, alias?: string  } 
  | { name: 'updateComment', args?: MutationUpdateCommentArgs[] | false, alias?: string  } 
  | { name: 'updateManyComments', args?: MutationUpdateManyCommentsArgs[] | false, alias?: string  } 
  | { name: 'upsertComment', args?: MutationUpsertCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteComment', args?: MutationDeleteCommentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyComments', args?: MutationDeleteManyCommentsArgs[] | false, alias?: string  } 
  | { name: 'createFile', args?: MutationCreateFileArgs[] | false, alias?: string  } 
  | { name: 'updateFile', args?: MutationUpdateFileArgs[] | false, alias?: string  } 
  | { name: 'updateManyFiles', args?: MutationUpdateManyFilesArgs[] | false, alias?: string  } 
  | { name: 'upsertFile', args?: MutationUpsertFileArgs[] | false, alias?: string  } 
  | { name: 'deleteFile', args?: MutationDeleteFileArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFiles', args?: MutationDeleteManyFilesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createAddress'
  | 'updateAddress'
  | 'updateManyAddresses'
  | 'upsertAddress'
  | 'deleteAddress'
  | 'deleteManyAddresses'
  | 'createActivity'
  | 'updateActivity'
  | 'updateManyActivities'
  | 'upsertActivity'
  | 'deleteActivity'
  | 'deleteManyActivities'
  | 'createAdvice'
  | 'updateAdvice'
  | 'updateManyAdvices'
  | 'upsertAdvice'
  | 'deleteAdvice'
  | 'deleteManyAdvices'
  | 'createComment'
  | 'updateComment'
  | 'updateManyComments'
  | 'upsertComment'
  | 'deleteComment'
  | 'deleteManyComments'
  | 'createFile'
  | 'updateFile'
  | 'updateManyFiles'
  | 'upsertFile'
  | 'deleteFile'
  | 'deleteManyFiles'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateAddressArgs =
  | 'data'
type MutationUpdateAddressArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAddressesArgs =
  | 'data'
  | 'where'
type MutationUpsertAddressArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAddressArgs =
  | 'where'
type MutationDeleteManyAddressesArgs =
  | 'where'
type MutationCreateActivityArgs =
  | 'data'
type MutationUpdateActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteActivityArgs =
  | 'where'
type MutationDeleteManyActivitiesArgs =
  | 'where'
type MutationCreateAdviceArgs =
  | 'data'
type MutationUpdateAdviceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAdvicesArgs =
  | 'data'
  | 'where'
type MutationUpsertAdviceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAdviceArgs =
  | 'where'
type MutationDeleteManyAdvicesArgs =
  | 'where'
type MutationCreateCommentArgs =
  | 'data'
type MutationUpdateCommentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCommentsArgs =
  | 'data'
  | 'where'
type MutationUpsertCommentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCommentArgs =
  | 'where'
type MutationDeleteManyCommentsArgs =
  | 'where'
type MutationCreateFileArgs =
  | 'data'
type MutationUpdateFileArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFilesArgs =
  | 'data'
  | 'where'
type MutationUpsertFileArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFileArgs =
  | 'where'
type MutationDeleteManyFilesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAddress: {
    type: 'Address'
    args: Record<MutationCreateAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  updateAddress: {
    type: 'Address'
    args: Record<MutationUpdateAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressUpdateInput, where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  updateManyAddresses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AddressUpdateManyMutationInput, where?: AddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAddress: {
    type: 'Address'
    args: Record<MutationUpsertAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AddressWhereUniqueInput, create: AddressCreateInput, update: AddressUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address> | prisma.Address
  }
  deleteAddress: {
    type: 'Address'
    args: Record<MutationDeleteAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AddressWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  deleteManyAddresses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAddressesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AddressWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createActivity: {
    type: 'Activity'
    args: Record<MutationCreateActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  updateActivity: {
    type: 'Activity'
    args: Record<MutationUpdateActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActivityUpdateInput, where: ActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  updateManyActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ActivityUpdateManyMutationInput, where?: ActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertActivity: {
    type: 'Activity'
    args: Record<MutationUpsertActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActivityWhereUniqueInput, create: ActivityCreateInput, update: ActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity> | prisma.Activity
  }
  deleteActivity: {
    type: 'Activity'
    args: Record<MutationDeleteActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  deleteManyActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAdvice: {
    type: 'Advice'
    args: Record<MutationCreateAdviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AdviceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice> | prisma.Advice
  }
  updateAdvice: {
    type: 'Advice'
    args: Record<MutationUpdateAdviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AdviceUpdateInput, where: AdviceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice | null> | prisma.Advice | null
  }
  updateManyAdvices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAdvicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AdviceUpdateManyMutationInput, where?: AdviceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAdvice: {
    type: 'Advice'
    args: Record<MutationUpsertAdviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AdviceWhereUniqueInput, create: AdviceCreateInput, update: AdviceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice> | prisma.Advice
  }
  deleteAdvice: {
    type: 'Advice'
    args: Record<MutationDeleteAdviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AdviceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice | null> | prisma.Advice | null
  }
  deleteManyAdvices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAdvicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AdviceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createComment: {
    type: 'Comment'
    args: Record<MutationCreateCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  updateComment: {
    type: 'Comment'
    args: Record<MutationUpdateCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentUpdateInput, where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  updateManyComments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CommentUpdateManyMutationInput, where?: CommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertComment: {
    type: 'Comment'
    args: Record<MutationUpsertCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CommentWhereUniqueInput, create: CommentCreateInput, update: CommentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment> | prisma.Comment
  }
  deleteComment: {
    type: 'Comment'
    args: Record<MutationDeleteCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CommentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  deleteManyComments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCommentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CommentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFile: {
    type: 'File'
    args: Record<MutationCreateFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  updateFile: {
    type: 'File'
    args: Record<MutationUpdateFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileUpdateInput, where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  updateManyFiles: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FileUpdateManyMutationInput, where?: FileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFile: {
    type: 'File'
    args: Record<MutationUpsertFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileWhereUniqueInput, create: FileCreateInput, update: FileUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File> | prisma.File
  }
  deleteFile: {
    type: 'File'
    args: Record<MutationDeleteFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FileWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  deleteManyFiles: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFilesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FileWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'address', args?: SubscriptionAddressArgs[] | false, alias?: string  } 
  | { name: 'activity', args?: SubscriptionActivityArgs[] | false, alias?: string  } 
  | { name: 'advice', args?: SubscriptionAdviceArgs[] | false, alias?: string  } 
  | { name: 'comment', args?: SubscriptionCommentArgs[] | false, alias?: string  } 
  | { name: 'file', args?: SubscriptionFileArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'address'
  | 'activity'
  | 'advice'
  | 'comment'
  | 'file'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionAddressArgs =
  | 'where'
type SubscriptionActivityArgs =
  | 'where'
type SubscriptionAdviceArgs =
  | 'where'
type SubscriptionCommentArgs =
  | 'where'
type SubscriptionFileArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  address: {
    type: 'AddressSubscriptionPayload'
    args: Record<SubscriptionAddressArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AddressSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressSubscriptionPayload | null> | prisma.AddressSubscriptionPayload | null
  }
  activity: {
    type: 'ActivitySubscriptionPayload'
    args: Record<SubscriptionActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivitySubscriptionPayload | null> | prisma.ActivitySubscriptionPayload | null
  }
  advice: {
    type: 'AdviceSubscriptionPayload'
    args: Record<SubscriptionAdviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AdviceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdviceSubscriptionPayload | null> | prisma.AdviceSubscriptionPayload | null
  }
  comment: {
    type: 'CommentSubscriptionPayload'
    args: Record<SubscriptionCommentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CommentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentSubscriptionPayload | null> | prisma.CommentSubscriptionPayload | null
  }
  file: {
    type: 'FileSubscriptionPayload'
    args: Record<SubscriptionFileArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FileSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FileSubscriptionPayload | null> | prisma.FileSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'phoneNumber', args?: [] | false, alias?: string  } 
  | { name: 'idNumber', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'sex', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'name'
  | 'phoneNumber'
  | 'idNumber'
  | 'password'
  | 'role'
  | 'sex'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phoneNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  idNumber: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  sex: {
    type: 'Sex'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Sex | null> | prisma.Sex | null
  }
}
  

// Types for AddressSubscriptionPayload

type AddressSubscriptionPayloadObject =
  | AddressSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AddressSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AddressSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Address'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Address | null> | prisma.Address | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AddressPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AddressSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AddressPreviousValues | null> | prisma.AddressPreviousValues | null
  }
}
  

// Types for AddressPreviousValues

type AddressPreviousValuesObject =
  | AddressPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'building', args?: [] | false, alias?: string  } 
  | { name: 'unit', args?: [] | false, alias?: string  } 
  | { name: 'room', args?: [] | false, alias?: string  } 

type AddressPreviousValuesFields =
  | 'id'
  | 'building'
  | 'unit'
  | 'room'



  

export interface AddressPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  building: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  unit: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  room: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ActivitySubscriptionPayload

type ActivitySubscriptionPayloadObject =
  | ActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Activity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Activity | null> | prisma.Activity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ActivityPreviousValues | null> | prisma.ActivityPreviousValues | null
  }
}
  

// Types for ActivityPreviousValues

type ActivityPreviousValuesObject =
  | ActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'startAt', args?: [] | false, alias?: string  } 
  | { name: 'place', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'reply', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type ActivityPreviousValuesFields =
  | 'id'
  | 'title'
  | 'content'
  | 'startAt'
  | 'place'
  | 'status'
  | 'reply'
  | 'createdAt'



  

export interface ActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  place: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ActivityPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  reply: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AdviceSubscriptionPayload

type AdviceSubscriptionPayloadObject =
  | AdviceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AdviceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AdviceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AdviceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Advice'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AdviceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Advice | null> | prisma.Advice | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AdvicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AdviceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AdvicePreviousValues | null> | prisma.AdvicePreviousValues | null
  }
}
  

// Types for AdvicePreviousValues

type AdvicePreviousValuesObject =
  | AdvicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type AdvicePreviousValuesFields =
  | 'id'
  | 'title'
  | 'content'
  | 'createdAt'



  

export interface AdvicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CommentSubscriptionPayload

type CommentSubscriptionPayloadObject =
  | CommentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CommentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CommentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Comment'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Comment | null> | prisma.Comment | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CommentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CommentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CommentPreviousValues | null> | prisma.CommentPreviousValues | null
  }
}
  

// Types for CommentPreviousValues

type CommentPreviousValuesObject =
  | CommentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 

type CommentPreviousValuesFields =
  | 'id'
  | 'content'
  | 'createdAt'



  

export interface CommentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FileSubscriptionPayload

type FileSubscriptionPayloadObject =
  | FileSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FileSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FileSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'File'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.File | null> | prisma.File | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FilePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FileSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FilePreviousValues | null> | prisma.FilePreviousValues | null
  }
}
  

// Types for FilePreviousValues

type FilePreviousValuesObject =
  | FilePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'path', args?: [] | false, alias?: string  } 
  | { name: 'filename', args?: [] | false, alias?: string  } 
  | { name: 'mimetype', args?: [] | false, alias?: string  } 
  | { name: 'encoding', args?: [] | false, alias?: string  } 

type FilePreviousValuesFields =
  | 'id'
  | 'path'
  | 'filename'
  | 'mimetype'
  | 'encoding'



  

export interface FilePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  path: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  filename: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  mimetype: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  encoding: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  phoneNumber?: string | null
  phoneNumber_not?: string | null
  phoneNumber_in?: string[]
  phoneNumber_not_in?: string[]
  phoneNumber_lt?: string | null
  phoneNumber_lte?: string | null
  phoneNumber_gt?: string | null
  phoneNumber_gte?: string | null
  phoneNumber_contains?: string | null
  phoneNumber_not_contains?: string | null
  phoneNumber_starts_with?: string | null
  phoneNumber_not_starts_with?: string | null
  phoneNumber_ends_with?: string | null
  phoneNumber_not_ends_with?: string | null
  idNumber?: string | null
  idNumber_not?: string | null
  idNumber_in?: string[]
  idNumber_not_in?: string[]
  idNumber_lt?: string | null
  idNumber_lte?: string | null
  idNumber_gt?: string | null
  idNumber_gte?: string | null
  idNumber_contains?: string | null
  idNumber_not_contains?: string | null
  idNumber_starts_with?: string | null
  idNumber_not_starts_with?: string | null
  idNumber_ends_with?: string | null
  idNumber_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  sex?: prisma.Sex | null
  sex_not?: prisma.Sex | null
  sex_in?: prisma.Sex[]
  sex_not_in?: prisma.Sex[]
  address?: AddressWhereInput | null
  activities_every?: ActivityWhereInput | null
  activities_some?: ActivityWhereInput | null
  activities_none?: ActivityWhereInput | null
  comments_every?: CommentWhereInput | null
  comments_some?: CommentWhereInput | null
  comments_none?: CommentWhereInput | null
  advices_every?: AdviceWhereInput | null
  advices_some?: AdviceWhereInput | null
  advices_none?: AdviceWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'phoneNumber_not', alias?: string  } 
  | { name: 'phoneNumber_in', alias?: string  } 
  | { name: 'phoneNumber_not_in', alias?: string  } 
  | { name: 'phoneNumber_lt', alias?: string  } 
  | { name: 'phoneNumber_lte', alias?: string  } 
  | { name: 'phoneNumber_gt', alias?: string  } 
  | { name: 'phoneNumber_gte', alias?: string  } 
  | { name: 'phoneNumber_contains', alias?: string  } 
  | { name: 'phoneNumber_not_contains', alias?: string  } 
  | { name: 'phoneNumber_starts_with', alias?: string  } 
  | { name: 'phoneNumber_not_starts_with', alias?: string  } 
  | { name: 'phoneNumber_ends_with', alias?: string  } 
  | { name: 'phoneNumber_not_ends_with', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'idNumber_not', alias?: string  } 
  | { name: 'idNumber_in', alias?: string  } 
  | { name: 'idNumber_not_in', alias?: string  } 
  | { name: 'idNumber_lt', alias?: string  } 
  | { name: 'idNumber_lte', alias?: string  } 
  | { name: 'idNumber_gt', alias?: string  } 
  | { name: 'idNumber_gte', alias?: string  } 
  | { name: 'idNumber_contains', alias?: string  } 
  | { name: 'idNumber_not_contains', alias?: string  } 
  | { name: 'idNumber_starts_with', alias?: string  } 
  | { name: 'idNumber_not_starts_with', alias?: string  } 
  | { name: 'idNumber_ends_with', alias?: string  } 
  | { name: 'idNumber_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'sex_not', alias?: string  } 
  | { name: 'sex_in', alias?: string  } 
  | { name: 'sex_not_in', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities_every', alias?: string  } 
  | { name: 'activities_some', alias?: string  } 
  | { name: 'activities_none', alias?: string  } 
  | { name: 'comments_every', alias?: string  } 
  | { name: 'comments_some', alias?: string  } 
  | { name: 'comments_none', alias?: string  } 
  | { name: 'advices_every', alias?: string  } 
  | { name: 'advices_some', alias?: string  } 
  | { name: 'advices_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  building?: number | null
  building_not?: number | null
  building_in?: number[]
  building_not_in?: number[]
  building_lt?: number | null
  building_lte?: number | null
  building_gt?: number | null
  building_gte?: number | null
  unit?: number | null
  unit_not?: number | null
  unit_in?: number[]
  unit_not_in?: number[]
  unit_lt?: number | null
  unit_lte?: number | null
  unit_gt?: number | null
  unit_gte?: number | null
  room?: number | null
  room_not?: number | null
  room_in?: number[]
  room_not_in?: number[]
  room_lt?: number | null
  room_lte?: number | null
  room_gt?: number | null
  room_gte?: number | null
  users_every?: UserWhereInput | null
  users_some?: UserWhereInput | null
  users_none?: UserWhereInput | null
  AND?: AddressWhereInput[]
  OR?: AddressWhereInput[]
  NOT?: AddressWhereInput[]
}
export type AddressWhereInputInputObject =
  | Extract<keyof AddressWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'building', alias?: string  } 
  | { name: 'building_not', alias?: string  } 
  | { name: 'building_in', alias?: string  } 
  | { name: 'building_not_in', alias?: string  } 
  | { name: 'building_lt', alias?: string  } 
  | { name: 'building_lte', alias?: string  } 
  | { name: 'building_gt', alias?: string  } 
  | { name: 'building_gte', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'unit_not', alias?: string  } 
  | { name: 'unit_in', alias?: string  } 
  | { name: 'unit_not_in', alias?: string  } 
  | { name: 'unit_lt', alias?: string  } 
  | { name: 'unit_lte', alias?: string  } 
  | { name: 'unit_gt', alias?: string  } 
  | { name: 'unit_gte', alias?: string  } 
  | { name: 'room', alias?: string  } 
  | { name: 'room_not', alias?: string  } 
  | { name: 'room_in', alias?: string  } 
  | { name: 'room_not_in', alias?: string  } 
  | { name: 'room_lt', alias?: string  } 
  | { name: 'room_lte', alias?: string  } 
  | { name: 'room_gt', alias?: string  } 
  | { name: 'room_gte', alias?: string  } 
  | { name: 'users_every', alias?: string  } 
  | { name: 'users_some', alias?: string  } 
  | { name: 'users_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  owner?: UserWhereInput | null
  startAt?: string | null
  startAt_not?: string | null
  startAt_in?: string[]
  startAt_not_in?: string[]
  startAt_lt?: string | null
  startAt_lte?: string | null
  startAt_gt?: string | null
  startAt_gte?: string | null
  place?: string | null
  place_not?: string | null
  place_in?: string[]
  place_not_in?: string[]
  place_lt?: string | null
  place_lte?: string | null
  place_gt?: string | null
  place_gte?: string | null
  place_contains?: string | null
  place_not_contains?: string | null
  place_starts_with?: string | null
  place_not_starts_with?: string | null
  place_ends_with?: string | null
  place_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  reply?: string | null
  reply_not?: string | null
  reply_in?: string[]
  reply_not_in?: string[]
  reply_lt?: string | null
  reply_lte?: string | null
  reply_gt?: string | null
  reply_gte?: string | null
  reply_contains?: string | null
  reply_not_contains?: string | null
  reply_starts_with?: string | null
  reply_not_starts_with?: string | null
  reply_ends_with?: string | null
  reply_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: ActivityWhereInput[]
  OR?: ActivityWhereInput[]
  NOT?: ActivityWhereInput[]
}
export type ActivityWhereInputInputObject =
  | Extract<keyof ActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'startAt_not', alias?: string  } 
  | { name: 'startAt_in', alias?: string  } 
  | { name: 'startAt_not_in', alias?: string  } 
  | { name: 'startAt_lt', alias?: string  } 
  | { name: 'startAt_lte', alias?: string  } 
  | { name: 'startAt_gt', alias?: string  } 
  | { name: 'startAt_gte', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'place_not', alias?: string  } 
  | { name: 'place_in', alias?: string  } 
  | { name: 'place_not_in', alias?: string  } 
  | { name: 'place_lt', alias?: string  } 
  | { name: 'place_lte', alias?: string  } 
  | { name: 'place_gt', alias?: string  } 
  | { name: 'place_gte', alias?: string  } 
  | { name: 'place_contains', alias?: string  } 
  | { name: 'place_not_contains', alias?: string  } 
  | { name: 'place_starts_with', alias?: string  } 
  | { name: 'place_not_starts_with', alias?: string  } 
  | { name: 'place_ends_with', alias?: string  } 
  | { name: 'place_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  | { name: 'reply_not', alias?: string  } 
  | { name: 'reply_in', alias?: string  } 
  | { name: 'reply_not_in', alias?: string  } 
  | { name: 'reply_lt', alias?: string  } 
  | { name: 'reply_lte', alias?: string  } 
  | { name: 'reply_gt', alias?: string  } 
  | { name: 'reply_gte', alias?: string  } 
  | { name: 'reply_contains', alias?: string  } 
  | { name: 'reply_not_contains', alias?: string  } 
  | { name: 'reply_starts_with', alias?: string  } 
  | { name: 'reply_not_starts_with', alias?: string  } 
  | { name: 'reply_ends_with', alias?: string  } 
  | { name: 'reply_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CommentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  owner?: UserWhereInput | null
  advice?: AdviceWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: CommentWhereInput[]
  OR?: CommentWhereInput[]
  NOT?: CommentWhereInput[]
}
export type CommentWhereInputInputObject =
  | Extract<keyof CommentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'advice', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AdviceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  owner?: UserWhereInput | null
  comments_every?: CommentWhereInput | null
  comments_some?: CommentWhereInput | null
  comments_none?: CommentWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: AdviceWhereInput[]
  OR?: AdviceWhereInput[]
  NOT?: AdviceWhereInput[]
}
export type AdviceWhereInputInputObject =
  | Extract<keyof AdviceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'comments_every', alias?: string  } 
  | { name: 'comments_some', alias?: string  } 
  | { name: 'comments_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressWhereUniqueInput {
  id?: string | null
}
export type AddressWhereUniqueInputInputObject =
  | Extract<keyof AddressWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ActivityWhereUniqueInput {
  id?: string | null
}
export type ActivityWhereUniqueInputInputObject =
  | Extract<keyof ActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AdviceWhereUniqueInput {
  id?: string | null
}
export type AdviceWhereUniqueInputInputObject =
  | Extract<keyof AdviceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CommentWhereUniqueInput {
  id?: string | null
}
export type CommentWhereUniqueInputInputObject =
  | Extract<keyof CommentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FileWhereUniqueInput {
  id?: string | null
}
export type FileWhereUniqueInputInputObject =
  | Extract<keyof FileWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FileWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  path?: string | null
  path_not?: string | null
  path_in?: string[]
  path_not_in?: string[]
  path_lt?: string | null
  path_lte?: string | null
  path_gt?: string | null
  path_gte?: string | null
  path_contains?: string | null
  path_not_contains?: string | null
  path_starts_with?: string | null
  path_not_starts_with?: string | null
  path_ends_with?: string | null
  path_not_ends_with?: string | null
  filename?: string | null
  filename_not?: string | null
  filename_in?: string[]
  filename_not_in?: string[]
  filename_lt?: string | null
  filename_lte?: string | null
  filename_gt?: string | null
  filename_gte?: string | null
  filename_contains?: string | null
  filename_not_contains?: string | null
  filename_starts_with?: string | null
  filename_not_starts_with?: string | null
  filename_ends_with?: string | null
  filename_not_ends_with?: string | null
  mimetype?: string | null
  mimetype_not?: string | null
  mimetype_in?: string[]
  mimetype_not_in?: string[]
  mimetype_lt?: string | null
  mimetype_lte?: string | null
  mimetype_gt?: string | null
  mimetype_gte?: string | null
  mimetype_contains?: string | null
  mimetype_not_contains?: string | null
  mimetype_starts_with?: string | null
  mimetype_not_starts_with?: string | null
  mimetype_ends_with?: string | null
  mimetype_not_ends_with?: string | null
  encoding?: string | null
  encoding_not?: string | null
  encoding_in?: string[]
  encoding_not_in?: string[]
  encoding_lt?: string | null
  encoding_lte?: string | null
  encoding_gt?: string | null
  encoding_gte?: string | null
  encoding_contains?: string | null
  encoding_not_contains?: string | null
  encoding_starts_with?: string | null
  encoding_not_starts_with?: string | null
  encoding_ends_with?: string | null
  encoding_not_ends_with?: string | null
  AND?: FileWhereInput[]
  OR?: FileWhereInput[]
  NOT?: FileWhereInput[]
}
export type FileWhereInputInputObject =
  | Extract<keyof FileWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'path', alias?: string  } 
  | { name: 'path_not', alias?: string  } 
  | { name: 'path_in', alias?: string  } 
  | { name: 'path_not_in', alias?: string  } 
  | { name: 'path_lt', alias?: string  } 
  | { name: 'path_lte', alias?: string  } 
  | { name: 'path_gt', alias?: string  } 
  | { name: 'path_gte', alias?: string  } 
  | { name: 'path_contains', alias?: string  } 
  | { name: 'path_not_contains', alias?: string  } 
  | { name: 'path_starts_with', alias?: string  } 
  | { name: 'path_not_starts_with', alias?: string  } 
  | { name: 'path_ends_with', alias?: string  } 
  | { name: 'path_not_ends_with', alias?: string  } 
  | { name: 'filename', alias?: string  } 
  | { name: 'filename_not', alias?: string  } 
  | { name: 'filename_in', alias?: string  } 
  | { name: 'filename_not_in', alias?: string  } 
  | { name: 'filename_lt', alias?: string  } 
  | { name: 'filename_lte', alias?: string  } 
  | { name: 'filename_gt', alias?: string  } 
  | { name: 'filename_gte', alias?: string  } 
  | { name: 'filename_contains', alias?: string  } 
  | { name: 'filename_not_contains', alias?: string  } 
  | { name: 'filename_starts_with', alias?: string  } 
  | { name: 'filename_not_starts_with', alias?: string  } 
  | { name: 'filename_ends_with', alias?: string  } 
  | { name: 'filename_not_ends_with', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'mimetype_not', alias?: string  } 
  | { name: 'mimetype_in', alias?: string  } 
  | { name: 'mimetype_not_in', alias?: string  } 
  | { name: 'mimetype_lt', alias?: string  } 
  | { name: 'mimetype_lte', alias?: string  } 
  | { name: 'mimetype_gt', alias?: string  } 
  | { name: 'mimetype_gte', alias?: string  } 
  | { name: 'mimetype_contains', alias?: string  } 
  | { name: 'mimetype_not_contains', alias?: string  } 
  | { name: 'mimetype_starts_with', alias?: string  } 
  | { name: 'mimetype_not_starts_with', alias?: string  } 
  | { name: 'mimetype_ends_with', alias?: string  } 
  | { name: 'mimetype_not_ends_with', alias?: string  } 
  | { name: 'encoding', alias?: string  } 
  | { name: 'encoding_not', alias?: string  } 
  | { name: 'encoding_in', alias?: string  } 
  | { name: 'encoding_not_in', alias?: string  } 
  | { name: 'encoding_lt', alias?: string  } 
  | { name: 'encoding_lte', alias?: string  } 
  | { name: 'encoding_gt', alias?: string  } 
  | { name: 'encoding_gte', alias?: string  } 
  | { name: 'encoding_contains', alias?: string  } 
  | { name: 'encoding_not_contains', alias?: string  } 
  | { name: 'encoding_starts_with', alias?: string  } 
  | { name: 'encoding_not_starts_with', alias?: string  } 
  | { name: 'encoding_ends_with', alias?: string  } 
  | { name: 'encoding_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  name?: string
  phoneNumber?: string
  idNumber?: string
  password?: string | null
  role?: prisma.Role
  sex?: prisma.Sex | null
  address?: AddressCreateOneWithoutUsersInput | null
  activities?: ActivityCreateManyWithoutOwnerInput | null
  comments?: CommentCreateManyWithoutOwnerInput | null
  advices?: AdviceCreateManyWithoutOwnerInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface AddressCreateOneWithoutUsersInput {
  create?: AddressCreateWithoutUsersInput | null
  connect?: AddressWhereUniqueInput | null
}
export type AddressCreateOneWithoutUsersInputInputObject =
  | Extract<keyof AddressCreateOneWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AddressCreateWithoutUsersInput {
  id?: string | null
  building?: number
  unit?: number
  room?: number
}
export type AddressCreateWithoutUsersInputInputObject =
  | Extract<keyof AddressCreateWithoutUsersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'building', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'room', alias?: string  } 
  
export interface ActivityCreateManyWithoutOwnerInput {
  create?: ActivityCreateWithoutOwnerInput[]
  connect?: ActivityWhereUniqueInput[]
}
export type ActivityCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof ActivityCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ActivityCreateWithoutOwnerInput {
  id?: string | null
  title?: string
  content?: string
  startAt?: string
  place?: string
  status?: prisma.Status
  reply?: string | null
}
export type ActivityCreateWithoutOwnerInputInputObject =
  | Extract<keyof ActivityCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  
export interface CommentCreateManyWithoutOwnerInput {
  create?: CommentCreateWithoutOwnerInput[]
  connect?: CommentWhereUniqueInput[]
}
export type CommentCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof CommentCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CommentCreateWithoutOwnerInput {
  id?: string | null
  content?: string
  advice?: AdviceCreateOneWithoutCommentsInput | null
}
export type CommentCreateWithoutOwnerInputInputObject =
  | Extract<keyof CommentCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'advice', alias?: string  } 
  
export interface AdviceCreateOneWithoutCommentsInput {
  create?: AdviceCreateWithoutCommentsInput | null
  connect?: AdviceWhereUniqueInput | null
}
export type AdviceCreateOneWithoutCommentsInputInputObject =
  | Extract<keyof AdviceCreateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AdviceCreateWithoutCommentsInput {
  id?: string | null
  title?: string
  content?: string
  owner?: UserCreateOneWithoutAdvicesInput
}
export type AdviceCreateWithoutCommentsInputInputObject =
  | Extract<keyof AdviceCreateWithoutCommentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserCreateOneWithoutAdvicesInput {
  create?: UserCreateWithoutAdvicesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutAdvicesInputInputObject =
  | Extract<keyof UserCreateOneWithoutAdvicesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAdvicesInput {
  id?: string | null
  name?: string
  phoneNumber?: string
  idNumber?: string
  password?: string | null
  role?: prisma.Role
  sex?: prisma.Sex | null
  address?: AddressCreateOneWithoutUsersInput | null
  activities?: ActivityCreateManyWithoutOwnerInput | null
  comments?: CommentCreateManyWithoutOwnerInput | null
}
export type UserCreateWithoutAdvicesInputInputObject =
  | Extract<keyof UserCreateWithoutAdvicesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface AdviceCreateManyWithoutOwnerInput {
  create?: AdviceCreateWithoutOwnerInput[]
  connect?: AdviceWhereUniqueInput[]
}
export type AdviceCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof AdviceCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AdviceCreateWithoutOwnerInput {
  id?: string | null
  title?: string
  content?: string
  comments?: CommentCreateManyWithoutAdviceInput | null
}
export type AdviceCreateWithoutOwnerInputInputObject =
  | Extract<keyof AdviceCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface CommentCreateManyWithoutAdviceInput {
  create?: CommentCreateWithoutAdviceInput[]
  connect?: CommentWhereUniqueInput[]
}
export type CommentCreateManyWithoutAdviceInputInputObject =
  | Extract<keyof CommentCreateManyWithoutAdviceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CommentCreateWithoutAdviceInput {
  id?: string | null
  content?: string
  owner?: UserCreateOneWithoutCommentsInput | null
}
export type CommentCreateWithoutAdviceInputInputObject =
  | Extract<keyof CommentCreateWithoutAdviceInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserCreateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCommentsInputInputObject =
  | Extract<keyof UserCreateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCommentsInput {
  id?: string | null
  name?: string
  phoneNumber?: string
  idNumber?: string
  password?: string | null
  role?: prisma.Role
  sex?: prisma.Sex | null
  address?: AddressCreateOneWithoutUsersInput | null
  activities?: ActivityCreateManyWithoutOwnerInput | null
  advices?: AdviceCreateManyWithoutOwnerInput | null
}
export type UserCreateWithoutCommentsInputInputObject =
  | Extract<keyof UserCreateWithoutCommentsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface UserUpdateInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
  address?: AddressUpdateOneWithoutUsersInput | null
  activities?: ActivityUpdateManyWithoutOwnerInput | null
  comments?: CommentUpdateManyWithoutOwnerInput | null
  advices?: AdviceUpdateManyWithoutOwnerInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface AddressUpdateOneWithoutUsersInput {
  create?: AddressCreateWithoutUsersInput | null
  update?: AddressUpdateWithoutUsersDataInput | null
  upsert?: AddressUpsertWithoutUsersInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AddressWhereUniqueInput | null
}
export type AddressUpdateOneWithoutUsersInputInputObject =
  | Extract<keyof AddressUpdateOneWithoutUsersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AddressUpdateWithoutUsersDataInput {
  building?: number | null
  unit?: number | null
  room?: number | null
}
export type AddressUpdateWithoutUsersDataInputInputObject =
  | Extract<keyof AddressUpdateWithoutUsersDataInput, string>
  | { name: 'building', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'room', alias?: string  } 
  
export interface AddressUpsertWithoutUsersInput {
  update?: AddressUpdateWithoutUsersDataInput
  create?: AddressCreateWithoutUsersInput
}
export type AddressUpsertWithoutUsersInputInputObject =
  | Extract<keyof AddressUpsertWithoutUsersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ActivityUpdateManyWithoutOwnerInput {
  create?: ActivityCreateWithoutOwnerInput[]
  delete?: ActivityWhereUniqueInput[]
  connect?: ActivityWhereUniqueInput[]
  set?: ActivityWhereUniqueInput[]
  disconnect?: ActivityWhereUniqueInput[]
  update?: ActivityUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: ActivityUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: ActivityScalarWhereInput[]
  updateMany?: ActivityUpdateManyWithWhereNestedInput[]
}
export type ActivityUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof ActivityUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ActivityUpdateWithWhereUniqueWithoutOwnerInput {
  where?: ActivityWhereUniqueInput
  data?: ActivityUpdateWithoutOwnerDataInput
}
export type ActivityUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof ActivityUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ActivityUpdateWithoutOwnerDataInput {
  title?: string | null
  content?: string | null
  startAt?: string | null
  place?: string | null
  status?: prisma.Status | null
  reply?: string | null
}
export type ActivityUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof ActivityUpdateWithoutOwnerDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  
export interface ActivityUpsertWithWhereUniqueWithoutOwnerInput {
  where?: ActivityWhereUniqueInput
  update?: ActivityUpdateWithoutOwnerDataInput
  create?: ActivityCreateWithoutOwnerInput
}
export type ActivityUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof ActivityUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ActivityScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  startAt?: string | null
  startAt_not?: string | null
  startAt_in?: string[]
  startAt_not_in?: string[]
  startAt_lt?: string | null
  startAt_lte?: string | null
  startAt_gt?: string | null
  startAt_gte?: string | null
  place?: string | null
  place_not?: string | null
  place_in?: string[]
  place_not_in?: string[]
  place_lt?: string | null
  place_lte?: string | null
  place_gt?: string | null
  place_gte?: string | null
  place_contains?: string | null
  place_not_contains?: string | null
  place_starts_with?: string | null
  place_not_starts_with?: string | null
  place_ends_with?: string | null
  place_not_ends_with?: string | null
  status?: prisma.Status | null
  status_not?: prisma.Status | null
  status_in?: prisma.Status[]
  status_not_in?: prisma.Status[]
  reply?: string | null
  reply_not?: string | null
  reply_in?: string[]
  reply_not_in?: string[]
  reply_lt?: string | null
  reply_lte?: string | null
  reply_gt?: string | null
  reply_gte?: string | null
  reply_contains?: string | null
  reply_not_contains?: string | null
  reply_starts_with?: string | null
  reply_not_starts_with?: string | null
  reply_ends_with?: string | null
  reply_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: ActivityScalarWhereInput[]
  OR?: ActivityScalarWhereInput[]
  NOT?: ActivityScalarWhereInput[]
}
export type ActivityScalarWhereInputInputObject =
  | Extract<keyof ActivityScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'startAt_not', alias?: string  } 
  | { name: 'startAt_in', alias?: string  } 
  | { name: 'startAt_not_in', alias?: string  } 
  | { name: 'startAt_lt', alias?: string  } 
  | { name: 'startAt_lte', alias?: string  } 
  | { name: 'startAt_gt', alias?: string  } 
  | { name: 'startAt_gte', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'place_not', alias?: string  } 
  | { name: 'place_in', alias?: string  } 
  | { name: 'place_not_in', alias?: string  } 
  | { name: 'place_lt', alias?: string  } 
  | { name: 'place_lte', alias?: string  } 
  | { name: 'place_gt', alias?: string  } 
  | { name: 'place_gte', alias?: string  } 
  | { name: 'place_contains', alias?: string  } 
  | { name: 'place_not_contains', alias?: string  } 
  | { name: 'place_starts_with', alias?: string  } 
  | { name: 'place_not_starts_with', alias?: string  } 
  | { name: 'place_ends_with', alias?: string  } 
  | { name: 'place_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  | { name: 'reply_not', alias?: string  } 
  | { name: 'reply_in', alias?: string  } 
  | { name: 'reply_not_in', alias?: string  } 
  | { name: 'reply_lt', alias?: string  } 
  | { name: 'reply_lte', alias?: string  } 
  | { name: 'reply_gt', alias?: string  } 
  | { name: 'reply_gte', alias?: string  } 
  | { name: 'reply_contains', alias?: string  } 
  | { name: 'reply_not_contains', alias?: string  } 
  | { name: 'reply_starts_with', alias?: string  } 
  | { name: 'reply_not_starts_with', alias?: string  } 
  | { name: 'reply_ends_with', alias?: string  } 
  | { name: 'reply_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActivityUpdateManyWithWhereNestedInput {
  where?: ActivityScalarWhereInput
  data?: ActivityUpdateManyDataInput
}
export type ActivityUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ActivityUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ActivityUpdateManyDataInput {
  title?: string | null
  content?: string | null
  startAt?: string | null
  place?: string | null
  status?: prisma.Status | null
  reply?: string | null
}
export type ActivityUpdateManyDataInputInputObject =
  | Extract<keyof ActivityUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  
export interface CommentUpdateManyWithoutOwnerInput {
  create?: CommentCreateWithoutOwnerInput[]
  delete?: CommentWhereUniqueInput[]
  connect?: CommentWhereUniqueInput[]
  set?: CommentWhereUniqueInput[]
  disconnect?: CommentWhereUniqueInput[]
  update?: CommentUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: CommentUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: CommentScalarWhereInput[]
  updateMany?: CommentUpdateManyWithWhereNestedInput[]
}
export type CommentUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof CommentUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CommentUpdateWithWhereUniqueWithoutOwnerInput {
  where?: CommentWhereUniqueInput
  data?: CommentUpdateWithoutOwnerDataInput
}
export type CommentUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof CommentUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CommentUpdateWithoutOwnerDataInput {
  content?: string | null
  advice?: AdviceUpdateOneWithoutCommentsInput | null
}
export type CommentUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof CommentUpdateWithoutOwnerDataInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'advice', alias?: string  } 
  
export interface AdviceUpdateOneWithoutCommentsInput {
  create?: AdviceCreateWithoutCommentsInput | null
  update?: AdviceUpdateWithoutCommentsDataInput | null
  upsert?: AdviceUpsertWithoutCommentsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: AdviceWhereUniqueInput | null
}
export type AdviceUpdateOneWithoutCommentsInputInputObject =
  | Extract<keyof AdviceUpdateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AdviceUpdateWithoutCommentsDataInput {
  title?: string | null
  content?: string | null
  owner?: UserUpdateOneRequiredWithoutAdvicesInput | null
}
export type AdviceUpdateWithoutCommentsDataInputInputObject =
  | Extract<keyof AdviceUpdateWithoutCommentsDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutAdvicesInput {
  create?: UserCreateWithoutAdvicesInput | null
  update?: UserUpdateWithoutAdvicesDataInput | null
  upsert?: UserUpsertWithoutAdvicesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutAdvicesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutAdvicesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutAdvicesDataInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
  address?: AddressUpdateOneWithoutUsersInput | null
  activities?: ActivityUpdateManyWithoutOwnerInput | null
  comments?: CommentUpdateManyWithoutOwnerInput | null
}
export type UserUpdateWithoutAdvicesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAdvicesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface UserUpsertWithoutAdvicesInput {
  update?: UserUpdateWithoutAdvicesDataInput
  create?: UserCreateWithoutAdvicesInput
}
export type UserUpsertWithoutAdvicesInputInputObject =
  | Extract<keyof UserUpsertWithoutAdvicesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AdviceUpsertWithoutCommentsInput {
  update?: AdviceUpdateWithoutCommentsDataInput
  create?: AdviceCreateWithoutCommentsInput
}
export type AdviceUpsertWithoutCommentsInputInputObject =
  | Extract<keyof AdviceUpsertWithoutCommentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentUpsertWithWhereUniqueWithoutOwnerInput {
  where?: CommentWhereUniqueInput
  update?: CommentUpdateWithoutOwnerDataInput
  create?: CommentCreateWithoutOwnerInput
}
export type CommentUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof CommentUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: CommentScalarWhereInput[]
  OR?: CommentScalarWhereInput[]
  NOT?: CommentScalarWhereInput[]
}
export type CommentScalarWhereInputInputObject =
  | Extract<keyof CommentScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CommentUpdateManyWithWhereNestedInput {
  where?: CommentScalarWhereInput
  data?: CommentUpdateManyDataInput
}
export type CommentUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof CommentUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CommentUpdateManyDataInput {
  content?: string | null
}
export type CommentUpdateManyDataInputInputObject =
  | Extract<keyof CommentUpdateManyDataInput, string>
  | { name: 'content', alias?: string  } 
  
export interface AdviceUpdateManyWithoutOwnerInput {
  create?: AdviceCreateWithoutOwnerInput[]
  delete?: AdviceWhereUniqueInput[]
  connect?: AdviceWhereUniqueInput[]
  set?: AdviceWhereUniqueInput[]
  disconnect?: AdviceWhereUniqueInput[]
  update?: AdviceUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: AdviceUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: AdviceScalarWhereInput[]
  updateMany?: AdviceUpdateManyWithWhereNestedInput[]
}
export type AdviceUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof AdviceUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AdviceUpdateWithWhereUniqueWithoutOwnerInput {
  where?: AdviceWhereUniqueInput
  data?: AdviceUpdateWithoutOwnerDataInput
}
export type AdviceUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof AdviceUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AdviceUpdateWithoutOwnerDataInput {
  title?: string | null
  content?: string | null
  comments?: CommentUpdateManyWithoutAdviceInput | null
}
export type AdviceUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof AdviceUpdateWithoutOwnerDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface CommentUpdateManyWithoutAdviceInput {
  create?: CommentCreateWithoutAdviceInput[]
  delete?: CommentWhereUniqueInput[]
  connect?: CommentWhereUniqueInput[]
  set?: CommentWhereUniqueInput[]
  disconnect?: CommentWhereUniqueInput[]
  update?: CommentUpdateWithWhereUniqueWithoutAdviceInput[]
  upsert?: CommentUpsertWithWhereUniqueWithoutAdviceInput[]
  deleteMany?: CommentScalarWhereInput[]
  updateMany?: CommentUpdateManyWithWhereNestedInput[]
}
export type CommentUpdateManyWithoutAdviceInputInputObject =
  | Extract<keyof CommentUpdateManyWithoutAdviceInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface CommentUpdateWithWhereUniqueWithoutAdviceInput {
  where?: CommentWhereUniqueInput
  data?: CommentUpdateWithoutAdviceDataInput
}
export type CommentUpdateWithWhereUniqueWithoutAdviceInputInputObject =
  | Extract<keyof CommentUpdateWithWhereUniqueWithoutAdviceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface CommentUpdateWithoutAdviceDataInput {
  content?: string | null
  owner?: UserUpdateOneWithoutCommentsInput | null
}
export type CommentUpdateWithoutAdviceDataInputInputObject =
  | Extract<keyof CommentUpdateWithoutAdviceDataInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  
export interface UserUpdateOneWithoutCommentsInput {
  create?: UserCreateWithoutCommentsInput | null
  update?: UserUpdateWithoutCommentsDataInput | null
  upsert?: UserUpsertWithoutCommentsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutCommentsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutCommentsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCommentsDataInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
  address?: AddressUpdateOneWithoutUsersInput | null
  activities?: ActivityUpdateManyWithoutOwnerInput | null
  advices?: AdviceUpdateManyWithoutOwnerInput | null
}
export type UserUpdateWithoutCommentsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCommentsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface UserUpsertWithoutCommentsInput {
  update?: UserUpdateWithoutCommentsDataInput
  create?: UserCreateWithoutCommentsInput
}
export type UserUpsertWithoutCommentsInputInputObject =
  | Extract<keyof UserUpsertWithoutCommentsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CommentUpsertWithWhereUniqueWithoutAdviceInput {
  where?: CommentWhereUniqueInput
  update?: CommentUpdateWithoutAdviceDataInput
  create?: CommentCreateWithoutAdviceInput
}
export type CommentUpsertWithWhereUniqueWithoutAdviceInputInputObject =
  | Extract<keyof CommentUpsertWithWhereUniqueWithoutAdviceInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AdviceUpsertWithWhereUniqueWithoutOwnerInput {
  where?: AdviceWhereUniqueInput
  update?: AdviceUpdateWithoutOwnerDataInput
  create?: AdviceCreateWithoutOwnerInput
}
export type AdviceUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof AdviceUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AdviceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  AND?: AdviceScalarWhereInput[]
  OR?: AdviceScalarWhereInput[]
  NOT?: AdviceScalarWhereInput[]
}
export type AdviceScalarWhereInputInputObject =
  | Extract<keyof AdviceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AdviceUpdateManyWithWhereNestedInput {
  where?: AdviceScalarWhereInput
  data?: AdviceUpdateManyDataInput
}
export type AdviceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AdviceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AdviceUpdateManyDataInput {
  title?: string | null
  content?: string | null
}
export type AdviceUpdateManyDataInputInputObject =
  | Extract<keyof AdviceUpdateManyDataInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  
export interface AddressCreateInput {
  id?: string | null
  building?: number
  unit?: number
  room?: number
  users?: UserCreateManyWithoutAddressInput | null
}
export type AddressCreateInputInputObject =
  | Extract<keyof AddressCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'building', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'room', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserCreateManyWithoutAddressInput {
  create?: UserCreateWithoutAddressInput[]
  connect?: UserWhereUniqueInput[]
}
export type UserCreateManyWithoutAddressInputInputObject =
  | Extract<keyof UserCreateManyWithoutAddressInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutAddressInput {
  id?: string | null
  name?: string
  phoneNumber?: string
  idNumber?: string
  password?: string | null
  role?: prisma.Role
  sex?: prisma.Sex | null
  activities?: ActivityCreateManyWithoutOwnerInput | null
  comments?: CommentCreateManyWithoutOwnerInput | null
  advices?: AdviceCreateManyWithoutOwnerInput | null
}
export type UserCreateWithoutAddressInputInputObject =
  | Extract<keyof UserCreateWithoutAddressInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface AddressUpdateInput {
  building?: number | null
  unit?: number | null
  room?: number | null
  users?: UserUpdateManyWithoutAddressInput | null
}
export type AddressUpdateInputInputObject =
  | Extract<keyof AddressUpdateInput, string>
  | { name: 'building', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'room', alias?: string  } 
  | { name: 'users', alias?: string  } 
  
export interface UserUpdateManyWithoutAddressInput {
  create?: UserCreateWithoutAddressInput[]
  delete?: UserWhereUniqueInput[]
  connect?: UserWhereUniqueInput[]
  set?: UserWhereUniqueInput[]
  disconnect?: UserWhereUniqueInput[]
  update?: UserUpdateWithWhereUniqueWithoutAddressInput[]
  upsert?: UserUpsertWithWhereUniqueWithoutAddressInput[]
  deleteMany?: UserScalarWhereInput[]
  updateMany?: UserUpdateManyWithWhereNestedInput[]
}
export type UserUpdateManyWithoutAddressInputInputObject =
  | Extract<keyof UserUpdateManyWithoutAddressInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface UserUpdateWithWhereUniqueWithoutAddressInput {
  where?: UserWhereUniqueInput
  data?: UserUpdateWithoutAddressDataInput
}
export type UserUpdateWithWhereUniqueWithoutAddressInputInputObject =
  | Extract<keyof UserUpdateWithWhereUniqueWithoutAddressInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateWithoutAddressDataInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
  activities?: ActivityUpdateManyWithoutOwnerInput | null
  comments?: CommentUpdateManyWithoutOwnerInput | null
  advices?: AdviceUpdateManyWithoutOwnerInput | null
}
export type UserUpdateWithoutAddressDataInputInputObject =
  | Extract<keyof UserUpdateWithoutAddressDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'activities', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface UserUpsertWithWhereUniqueWithoutAddressInput {
  where?: UserWhereUniqueInput
  update?: UserUpdateWithoutAddressDataInput
  create?: UserCreateWithoutAddressInput
}
export type UserUpsertWithWhereUniqueWithoutAddressInputInputObject =
  | Extract<keyof UserUpsertWithWhereUniqueWithoutAddressInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  phoneNumber?: string | null
  phoneNumber_not?: string | null
  phoneNumber_in?: string[]
  phoneNumber_not_in?: string[]
  phoneNumber_lt?: string | null
  phoneNumber_lte?: string | null
  phoneNumber_gt?: string | null
  phoneNumber_gte?: string | null
  phoneNumber_contains?: string | null
  phoneNumber_not_contains?: string | null
  phoneNumber_starts_with?: string | null
  phoneNumber_not_starts_with?: string | null
  phoneNumber_ends_with?: string | null
  phoneNumber_not_ends_with?: string | null
  idNumber?: string | null
  idNumber_not?: string | null
  idNumber_in?: string[]
  idNumber_not_in?: string[]
  idNumber_lt?: string | null
  idNumber_lte?: string | null
  idNumber_gt?: string | null
  idNumber_gte?: string | null
  idNumber_contains?: string | null
  idNumber_not_contains?: string | null
  idNumber_starts_with?: string | null
  idNumber_not_starts_with?: string | null
  idNumber_ends_with?: string | null
  idNumber_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  sex?: prisma.Sex | null
  sex_not?: prisma.Sex | null
  sex_in?: prisma.Sex[]
  sex_not_in?: prisma.Sex[]
  AND?: UserScalarWhereInput[]
  OR?: UserScalarWhereInput[]
  NOT?: UserScalarWhereInput[]
}
export type UserScalarWhereInputInputObject =
  | Extract<keyof UserScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'phoneNumber_not', alias?: string  } 
  | { name: 'phoneNumber_in', alias?: string  } 
  | { name: 'phoneNumber_not_in', alias?: string  } 
  | { name: 'phoneNumber_lt', alias?: string  } 
  | { name: 'phoneNumber_lte', alias?: string  } 
  | { name: 'phoneNumber_gt', alias?: string  } 
  | { name: 'phoneNumber_gte', alias?: string  } 
  | { name: 'phoneNumber_contains', alias?: string  } 
  | { name: 'phoneNumber_not_contains', alias?: string  } 
  | { name: 'phoneNumber_starts_with', alias?: string  } 
  | { name: 'phoneNumber_not_starts_with', alias?: string  } 
  | { name: 'phoneNumber_ends_with', alias?: string  } 
  | { name: 'phoneNumber_not_ends_with', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'idNumber_not', alias?: string  } 
  | { name: 'idNumber_in', alias?: string  } 
  | { name: 'idNumber_not_in', alias?: string  } 
  | { name: 'idNumber_lt', alias?: string  } 
  | { name: 'idNumber_lte', alias?: string  } 
  | { name: 'idNumber_gt', alias?: string  } 
  | { name: 'idNumber_gte', alias?: string  } 
  | { name: 'idNumber_contains', alias?: string  } 
  | { name: 'idNumber_not_contains', alias?: string  } 
  | { name: 'idNumber_starts_with', alias?: string  } 
  | { name: 'idNumber_not_starts_with', alias?: string  } 
  | { name: 'idNumber_ends_with', alias?: string  } 
  | { name: 'idNumber_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'sex_not', alias?: string  } 
  | { name: 'sex_in', alias?: string  } 
  | { name: 'sex_not_in', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserUpdateManyWithWhereNestedInput {
  where?: UserScalarWhereInput
  data?: UserUpdateManyDataInput
}
export type UserUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof UserUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface UserUpdateManyDataInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
}
export type UserUpdateManyDataInputInputObject =
  | Extract<keyof UserUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  
export interface AddressUpdateManyMutationInput {
  building?: number | null
  unit?: number | null
  room?: number | null
}
export type AddressUpdateManyMutationInputInputObject =
  | Extract<keyof AddressUpdateManyMutationInput, string>
  | { name: 'building', alias?: string  } 
  | { name: 'unit', alias?: string  } 
  | { name: 'room', alias?: string  } 
  
export interface ActivityCreateInput {
  id?: string | null
  title?: string
  content?: string
  owner?: UserCreateOneWithoutActivitiesInput
  startAt?: string
  place?: string
  status?: prisma.Status
  reply?: string | null
}
export type ActivityCreateInputInputObject =
  | Extract<keyof ActivityCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  
export interface UserCreateOneWithoutActivitiesInput {
  create?: UserCreateWithoutActivitiesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutActivitiesInputInputObject =
  | Extract<keyof UserCreateOneWithoutActivitiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutActivitiesInput {
  id?: string | null
  name?: string
  phoneNumber?: string
  idNumber?: string
  password?: string | null
  role?: prisma.Role
  sex?: prisma.Sex | null
  address?: AddressCreateOneWithoutUsersInput | null
  comments?: CommentCreateManyWithoutOwnerInput | null
  advices?: AdviceCreateManyWithoutOwnerInput | null
}
export type UserCreateWithoutActivitiesInputInputObject =
  | Extract<keyof UserCreateWithoutActivitiesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface ActivityUpdateInput {
  title?: string | null
  content?: string | null
  owner?: UserUpdateOneRequiredWithoutActivitiesInput | null
  startAt?: string | null
  place?: string | null
  status?: prisma.Status | null
  reply?: string | null
}
export type ActivityUpdateInputInputObject =
  | Extract<keyof ActivityUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutActivitiesInput {
  create?: UserCreateWithoutActivitiesInput | null
  update?: UserUpdateWithoutActivitiesDataInput | null
  upsert?: UserUpsertWithoutActivitiesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutActivitiesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutActivitiesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutActivitiesDataInput {
  name?: string | null
  phoneNumber?: string | null
  idNumber?: string | null
  password?: string | null
  role?: prisma.Role | null
  sex?: prisma.Sex | null
  address?: AddressUpdateOneWithoutUsersInput | null
  comments?: CommentUpdateManyWithoutOwnerInput | null
  advices?: AdviceUpdateManyWithoutOwnerInput | null
}
export type UserUpdateWithoutActivitiesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutActivitiesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'phoneNumber', alias?: string  } 
  | { name: 'idNumber', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'sex', alias?: string  } 
  | { name: 'address', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  | { name: 'advices', alias?: string  } 
  
export interface UserUpsertWithoutActivitiesInput {
  update?: UserUpdateWithoutActivitiesDataInput
  create?: UserCreateWithoutActivitiesInput
}
export type UserUpsertWithoutActivitiesInputInputObject =
  | Extract<keyof UserUpsertWithoutActivitiesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ActivityUpdateManyMutationInput {
  title?: string | null
  content?: string | null
  startAt?: string | null
  place?: string | null
  status?: prisma.Status | null
  reply?: string | null
}
export type ActivityUpdateManyMutationInputInputObject =
  | Extract<keyof ActivityUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'startAt', alias?: string  } 
  | { name: 'place', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'reply', alias?: string  } 
  
export interface AdviceCreateInput {
  id?: string | null
  title?: string
  content?: string
  owner?: UserCreateOneWithoutAdvicesInput
  comments?: CommentCreateManyWithoutAdviceInput | null
}
export type AdviceCreateInputInputObject =
  | Extract<keyof AdviceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface AdviceUpdateInput {
  title?: string | null
  content?: string | null
  owner?: UserUpdateOneRequiredWithoutAdvicesInput | null
  comments?: CommentUpdateManyWithoutAdviceInput | null
}
export type AdviceUpdateInputInputObject =
  | Extract<keyof AdviceUpdateInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'comments', alias?: string  } 
  
export interface AdviceUpdateManyMutationInput {
  title?: string | null
  content?: string | null
}
export type AdviceUpdateManyMutationInputInputObject =
  | Extract<keyof AdviceUpdateManyMutationInput, string>
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface CommentCreateInput {
  id?: string | null
  content?: string
  owner?: UserCreateOneWithoutCommentsInput | null
  advice?: AdviceCreateOneWithoutCommentsInput | null
}
export type CommentCreateInputInputObject =
  | Extract<keyof CommentCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'advice', alias?: string  } 
  
export interface CommentUpdateInput {
  content?: string | null
  owner?: UserUpdateOneWithoutCommentsInput | null
  advice?: AdviceUpdateOneWithoutCommentsInput | null
}
export type CommentUpdateInputInputObject =
  | Extract<keyof CommentUpdateInput, string>
  | { name: 'content', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'advice', alias?: string  } 
  
export interface CommentUpdateManyMutationInput {
  content?: string | null
}
export type CommentUpdateManyMutationInputInputObject =
  | Extract<keyof CommentUpdateManyMutationInput, string>
  | { name: 'content', alias?: string  } 
  
export interface FileCreateInput {
  id?: string | null
  path?: string
  filename?: string
  mimetype?: string
  encoding?: string
}
export type FileCreateInputInputObject =
  | Extract<keyof FileCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'path', alias?: string  } 
  | { name: 'filename', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'encoding', alias?: string  } 
  
export interface FileUpdateInput {
  path?: string | null
  filename?: string | null
  mimetype?: string | null
  encoding?: string | null
}
export type FileUpdateInputInputObject =
  | Extract<keyof FileUpdateInput, string>
  | { name: 'path', alias?: string  } 
  | { name: 'filename', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'encoding', alias?: string  } 
  
export interface FileUpdateManyMutationInput {
  path?: string | null
  filename?: string | null
  mimetype?: string | null
  encoding?: string | null
}
export type FileUpdateManyMutationInputInputObject =
  | Extract<keyof FileUpdateManyMutationInput, string>
  | { name: 'path', alias?: string  } 
  | { name: 'filename', alias?: string  } 
  | { name: 'mimetype', alias?: string  } 
  | { name: 'encoding', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AddressSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AddressWhereInput | null
  AND?: AddressSubscriptionWhereInput[]
  OR?: AddressSubscriptionWhereInput[]
  NOT?: AddressSubscriptionWhereInput[]
}
export type AddressSubscriptionWhereInputInputObject =
  | Extract<keyof AddressSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ActivityWhereInput | null
  AND?: ActivitySubscriptionWhereInput[]
  OR?: ActivitySubscriptionWhereInput[]
  NOT?: ActivitySubscriptionWhereInput[]
}
export type ActivitySubscriptionWhereInputInputObject =
  | Extract<keyof ActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AdviceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AdviceWhereInput | null
  AND?: AdviceSubscriptionWhereInput[]
  OR?: AdviceSubscriptionWhereInput[]
  NOT?: AdviceSubscriptionWhereInput[]
}
export type AdviceSubscriptionWhereInputInputObject =
  | Extract<keyof AdviceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CommentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CommentWhereInput | null
  AND?: CommentSubscriptionWhereInput[]
  OR?: CommentSubscriptionWhereInput[]
  NOT?: CommentSubscriptionWhereInput[]
}
export type CommentSubscriptionWhereInputInputObject =
  | Extract<keyof CommentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FileSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FileWhereInput | null
  AND?: FileSubscriptionWhereInput[]
  OR?: FileSubscriptionWhereInput[]
  NOT?: FileSubscriptionWhereInput[]
}
export type FileSubscriptionWhereInputInputObject =
  | Extract<keyof FileSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RoleValues =
  | 'RESIDENT'
  | 'WORKER'
  | 'MANAGER'
  
export type SexValues =
  | 'MALE'
  | 'FEMALE'
  
export type StatusValues =
  | 'PENDING'
  | 'APPROVED'
  | 'REJECTED'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'phoneNumber_ASC'
  | 'phoneNumber_DESC'
  | 'idNumber_ASC'
  | 'idNumber_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'sex_ASC'
  | 'sex_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'startAt_ASC'
  | 'startAt_DESC'
  | 'place_ASC'
  | 'place_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'reply_ASC'
  | 'reply_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CommentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AdviceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type AddressOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'building_ASC'
  | 'building_DESC'
  | 'unit_ASC'
  | 'unit_DESC'
  | 'room_ASC'
  | 'room_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FileOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'path_ASC'
  | 'path_DESC'
  | 'filename_ASC'
  | 'filename_DESC'
  | 'mimetype_ASC'
  | 'mimetype_DESC'
  | 'encoding_ASC'
  | 'encoding_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  
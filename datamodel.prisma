type User {
  id: ID! @id
  name: String!
  phoneNumber: String! @unique
  idNumber: String! @unique
  password: String
  role: Role!
  sex: Sex
  address: Address @relation(name: "ResidentIn")
  activities: [Activity!]! @relation(name: "ActivityOwner", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentOwner", onDelete: CASCADE)
  advices: [Advice!]! @relation(name: "AdviceOwner", onDelete: CASCADE)
}

type Address {
  id: ID! @id
  building: Int!
  unit: Int!
  room: Int!
  users: [User!]! @relation(name: "ResidentIn")
}

type Activity {
  id: ID! @id
  title: String!
  content: String!
  owner: User! @relation(name: "ActivityOwner", onDelete: SET_NULL)
  startAt: DateTime!
  place: String!
  status: Status!
  reply: String
}

type Advice {
  id: ID! @id
  title: String!
  content: String!
  owner: User! @relation(name: "AdviceOwner", onDelete: SET_NULL)
  comments: [Comment!]! @relation(name: "AdviceComment", onDelete: CASCADE)
}

type Comment {
  id: ID! @id
  content: String!
  owner: User @relation(name: "CommentOwner", onDelete: SET_NULL)
  advices: Advice @relation(name: "AdviceComment", onDelete: SET_NULL)
}

enum Sex {
  MALE
  FEMALE
}

enum Role {
  RESIDENT
  WORKER
  MANAGER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}